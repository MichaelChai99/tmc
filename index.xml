<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>槟中总青商团-国际讲演会</title><link>https://ytyeoh.github.io/tmc/</link><description>Recent content on 槟中总青商团-国际讲演会</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 26 Nov 2022 20:30:00 +0800</lastBuildDate><atom:link href="https://ytyeoh.github.io/tmc/index.xml" rel="self" type="application/rss+xml"/><item><title>Jane 主题预览</title><link>https://ytyeoh.github.io/tmc/post/jane-theme-preview/</link><pubDate>Tue, 06 Mar 2018 16:01:23 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/post/jane-theme-preview/</guid><description>&lt;p>主题预览,内容有待填充。&lt;/p></description></item><item><title>About</title><link>https://ytyeoh.github.io/tmc/about/</link><pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/about/</guid><description>&lt;p>Hugo is a static site engine written in Go.&lt;/p>
&lt;p>It makes use of a variety of open source projects including:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/spf13/cobra">Cobra&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/viper">Viper&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/jWalterWeatherman">J Walter Weatherman&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/spf13/cast">Cast&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Learn more and contribute on &lt;a href="https://github.com/gohugoio">GitHub&lt;/a>.&lt;/p></description></item><item><title>KPI</title><link>https://ytyeoh.github.io/tmc/kpi/</link><pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/kpi/</guid><description/></item><item><title>十二月执委会议</title><link>https://ytyeoh.github.io/tmc/reports/2022-12-02/</link><pubDate>Sat, 26 Nov 2022 20:30:00 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/reports/2022-12-02/</guid><description>&lt;h3 id="会议议程">会议议程：&lt;/h3>
&lt;h2 id="1-会长欢迎词---黄绣茹">1. 会长欢迎词 - 黄绣茹&lt;/h2>
&lt;h2 id="2-确认今日议程">2. 确认今日议程&lt;/h2>
&lt;p>提议：&lt;/p>
&lt;p>复议：&lt;/p>
&lt;h2 id="3-复准前期议案杨咏达">3. 复准前期议案（杨咏达）&lt;/h2>
&lt;p>提议：&lt;/p>
&lt;p>复议：&lt;/p>
&lt;h2 id="4-探讨前期议案引起事项">4. 探讨前期议案引起事项&lt;/h2>
&lt;h2 id="5-会长报告黄绣茹">5. 会长报告（黄绣茹）&lt;/h2>
&lt;p>提议：&lt;/p>
&lt;p>复议：&lt;/p>
&lt;h2 id="6-文教副会长报告庄英伦">6. 文教副会长报告（庄英伦）&lt;/h2>
&lt;h3 id="61-建议换例会到第一个和第三个星期四">6.1 建议换例会到第一个和第三个星期四&lt;/h3>
&lt;h3 id="62-每个特别联谊例会自家会友">6.2 每个特别联谊例会，自家会友&lt;/h3>
&lt;h3 id="63-例会最佳职务-删除主持人">6.3 例会最佳职务-删除主持人&lt;/h3>
&lt;h3 id="64-最佳评估-增加即兴评估">6.4 最佳评估-增加即兴评估&lt;/h3>
&lt;p>提议：&lt;/p>
&lt;p>复议：&lt;/p>
&lt;h2 id="7-公关副会长报告赖淑菁">7. 公关副会长报告（赖淑菁）&lt;/h2>
&lt;p>提议：&lt;/p>
&lt;p>复议：&lt;/p>
&lt;h2 id="8-会员副会长报告郑川宁">8. 会员副会长报告（郑川宁）&lt;/h2>
&lt;p>提议：&lt;/p>
&lt;p>复议：&lt;/p>
&lt;h2 id="9-礼宾司报告刘谨镇">9. 礼宾司报告（刘谨镇）&lt;/h2>
&lt;p>提议：&lt;/p>
&lt;p>复议：&lt;/p>
&lt;h2 id="10-财政报告景顺">10. 财政报告（景顺）&lt;/h2>
&lt;p>提议：&lt;/p>
&lt;p>复议：&lt;/p>
&lt;h2 id="11-其他讨论事项">11. 其他讨论事项&lt;/h2>
&lt;p>提议：黄綉茹&lt;/p>
&lt;p>复议：刘谨镇&lt;/p>
&lt;h2 id="12-下次会议日期">12. 下次会议日期&lt;/h2>
&lt;p>5/1/2023(星期四) 8:00pm Island&lt;/p>
&lt;p>提议：&lt;/p>
&lt;p>复议：&lt;/p>
&lt;h2 id="13-会议结束">13. 会议结束&lt;/h2>
&lt;p>提议：&lt;/p>
&lt;p>复议：&lt;/p>
&lt;h3 id="会议历时时x小时xx分钟">会议历时时X小时XX分钟&lt;/h3>
&lt;p>&lt;em>出席者&lt;/em>&lt;/p>
&lt;ol>
&lt;li>黄綉茹&lt;/li>
&lt;li>杨咏达&lt;/li>
&lt;li>张景顺&lt;/li>
&lt;li>黄延玮&lt;/li>
&lt;li>庄英伦&lt;/li>
&lt;li>刘谨镇&lt;/li>
&lt;li>陈凯业&lt;/li>
&lt;li>江天佑&lt;/li>
&lt;li>丘依慧&lt;/li>
&lt;li>郑川宁&lt;/li>
&lt;/ol>
&lt;p>&lt;em>缺席者&lt;/em>&lt;/p>
&lt;ol>
&lt;li>黄治铭&lt;/li>
&lt;li>胡志良&lt;/li>
&lt;li>赖淑菁&lt;/li>
&lt;/ol></description></item><item><title>十一月执委会议</title><link>https://ytyeoh.github.io/tmc/reports/2022-11-08/</link><pubDate>Tue, 08 Nov 2022 19:30:00 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/reports/2022-11-08/</guid><description>&lt;h3 id="会议议程">会议议程：&lt;/h3>
&lt;h2 id="1-会长欢迎词---黄绣茹">1. 会长欢迎词 - 黄绣茹&lt;/h2>
&lt;p>7点30分，会长欢迎大家出席。&lt;/p>
&lt;h2 id="2-确认今日议程">2. 确认今日议程&lt;/h2>
&lt;p>提议：邱依慧&lt;/p>
&lt;p>复议：陈凯业&lt;/p>
&lt;h2 id="3-复准前期议案杨咏达">3. 复准前期议案（杨咏达）&lt;/h2>
&lt;p>提议：刘谨镇&lt;/p>
&lt;p>复议：陈凯业&lt;/p>
&lt;h2 id="4-探讨前期议案引起事项">4. 探讨前期议案引起事项&lt;/h2>
&lt;h3 id="41-会内比赛事项">4.1 会内比赛事项&lt;/h3>
&lt;h3 id="42-彩带事项">4.2 彩带事项&lt;/h3>
&lt;h3 id="43-装东西的盒子">4.3 装东西的盒子&lt;/h3>
&lt;h2 id="5-讨论事项">5. 讨论事项&lt;/h2>
&lt;h3 id="51-槟中总青商团国际讲演会简称景顺">5.1 槟中总青商团国际讲演会简称（景顺）&lt;/h3>
&lt;p>目前暂缓，等待时机成熟再提呈。&lt;/p>
&lt;h3 id="52-槟中青-logo-景顺">5.2 槟中青 Logo （景顺）&lt;/h3>
&lt;p>目前暂缓，等待时机成熟再提呈。&lt;/p>
&lt;h3 id="53-建议-yes-每个小组有自己的-logo景顺">5.3 建议 YES 每个小组有自己的 Logo（景顺）&lt;/h3>
&lt;p>目前暂缓，等待时机成熟再提呈。&lt;/p>
&lt;h3 id="54-组织企业拜访-景顺">5.4 组织企业拜访 (景顺)&lt;/h3>
&lt;p>将会组织筹委会，把例会在二月份直接主办在工厂里。&lt;/p>
&lt;h3 id="55-公关文案及海报-绣茹">5.5 公关文案及海报 (绣茹)&lt;/h3>
&lt;p>黄綉茹和黄延玮会与淑菁沟通，寻找方法如何提升效率。&lt;/p>
&lt;h3 id="56-cot-2-綉茹">5.6 COT 2 （綉茹）&lt;/h3>
&lt;p>所有执委都必须出席。綉茹和英伦会另行通知时间。&lt;/p>
&lt;h3 id="57-活动宣传-凯业">5.7 活动宣传 （凯业）&lt;/h3>
&lt;p>谨镇会通过tit tok，拍摄短片。&lt;/p>
&lt;h3 id="58-企事录-依慧">5.8 企事录 （依慧）&lt;/h3>
&lt;ul>
&lt;li>5.8.1 嘉宾-Derrick 细节会跟依慧拿了补充上去。&lt;a href="https://ytyeoh.github.io/tmc/tmc/file/2022/8/1.pdf">详情&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="59-招人事项-延玮">5.9 招人事项 （延玮）&lt;/h3>
&lt;p>川宁会准备一份提案如何宣传。&lt;/p>
&lt;h3 id="510-新会员入会仪式-英伦">5.10 新会员入会仪式 （英伦）&lt;/h3>
&lt;p>当月最后一次例会，总评之后办一个入会仪式。&lt;/p>
&lt;h3 id="511-会内比赛奖项-英伦">5.11 会内比赛奖项 （英伦）&lt;/h3>
&lt;p>所有执委都必须出席。&lt;/p>
&lt;h3 id="512-户外活动增加备稿环节-英伦">5.12 户外活动增加备稿环节 （英伦）&lt;/h3>
&lt;p>鼓励户外活动经过oc同意后可以加入备稿。&lt;/p>
&lt;h3 id="513-就职典礼-绣茹">5.13 就职典礼 （绣茹）&lt;/h3>
&lt;p>会长会与evon接洽就职典礼。&lt;/p>
&lt;h3 id="514-购买彩带-绣茹">5.14 购买彩带 （绣茹）&lt;/h3>
&lt;p>天佑和川宁会去找适合的奖品来替代。&lt;/p>
&lt;h3 id="515-bb联办例会一月份-英伦">5.15 BB联办例会一月份 （英伦）&lt;/h3>
&lt;p>同意和BB联办，英伦会接洽。&lt;/p>
&lt;h3 id="516-12月-会外活动-延玮">5.16 12月-会外活动 （延玮）&lt;/h3>
&lt;ul>
&lt;li>
&lt;h1 id="5161-11月27号会上载相关文件详情tmcfile202281pdf">5.16.1 11月27号。会上载相关文件。&lt;a href="https://ytyeoh.github.io/tmc/tmc/file/2022/8/1.pdf">详情&lt;/a>&lt;/h1>
&lt;/li>
&lt;li>5.16.2 12月活动换去企事录，详情见&lt;em>5.8&lt;/em>&lt;/li>
&lt;/ul>
&lt;h2 id="6-财政报告景顺">6. 财政报告（景顺）&lt;/h2>
&lt;p>提议：黄綉茹&lt;/p>
&lt;p>复议：刘谨镇&lt;/p>
&lt;h2 id="7-下次会议日期">7. 下次会议日期&lt;/h2>
&lt;p>1/12/2022(星期四) 8:00pm Icon City Love Corner(Main Land)&lt;/p>
&lt;p>提议：张景顺&lt;/p>
&lt;p>复议：江天佑&lt;/p>
&lt;h2 id="8-会议结束">8. 会议结束&lt;/h2>
&lt;p>提议：邓川宁&lt;/p>
&lt;p>复议：黄綉茹&lt;/p>
&lt;h3 id="会议历时时2小时25分钟">会议历时时2小时25分钟&lt;/h3>
&lt;p>####依慧和川宁需要提交提案来放入报告。&lt;/p>
&lt;p>&lt;img src="https://ytyeoh.github.io/tmc/tmc/file/2022/11/1.jpeg" alt="image1" title="image1">&lt;/p>
&lt;p>&lt;em>出席者&lt;/em>&lt;/p>
&lt;ol>
&lt;li>黄綉茹&lt;/li>
&lt;li>杨咏达&lt;/li>
&lt;li>张景顺&lt;/li>
&lt;li>黄延玮&lt;/li>
&lt;li>庄英伦&lt;/li>
&lt;li>刘谨镇&lt;/li>
&lt;li>陈凯业&lt;/li>
&lt;li>江天佑&lt;/li>
&lt;li>丘依慧&lt;/li>
&lt;li>邓川宁&lt;/li>
&lt;/ol>
&lt;p>&lt;em>缺席者&lt;/em>&lt;/p>
&lt;ol>
&lt;li>黄治铭&lt;/li>
&lt;li>胡志良&lt;/li>
&lt;li>赖淑菁&lt;/li>
&lt;/ol></description></item><item><title>十月执委会议</title><link>https://ytyeoh.github.io/tmc/reports/2022-10-06/</link><pubDate>Wed, 05 Oct 2022 19:30:00 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/reports/2022-10-06/</guid><description>&lt;h3 id="会议议程">会议议程：&lt;/h3>
&lt;h2 id="1-会长欢迎词---黄绣茹">1. 会长欢迎词 - 黄绣茹&lt;/h2>
&lt;p>黄綉茹欢迎大家出席，虽然有所延迟，但有所延迟。&lt;/p>
&lt;h2 id="2-确认今日议程">2. 确认今日议程&lt;/h2>
&lt;p>提议：丘依慧&lt;/p>
&lt;p>复议：杨咏达&lt;/p>
&lt;h2 id="3-复准前期议案杨咏达">3. 复准前期议案（杨咏达）&lt;/h2>
&lt;p>提议：张景顺&lt;/p>
&lt;p>复议：庄英伦&lt;/p>
&lt;h2 id="4-探讨前期议案引起事项">4. 探讨前期议案引起事项&lt;/h2>
&lt;h3 id="41-企示路--计划在十二月期间举办由hair-story-derrick-做分享这个月在群组执委讨论决定第二场在明年三月由刘劲祥做分享">4.1 企示路 – 计划在十二月期间举办，由Hair Story Derrick 做分享，这个月在群组执委讨论决定。第二场在明年三月由刘劲祥做分享。&lt;/h3>
&lt;h3 id="42-pccc不允许开但建议创造album-for-tmc">4.2 PCCC不允许开，但建议创造Album for TMC&lt;/h3>
&lt;h2 id="5-讨论事项">5. 讨论事项&lt;/h2>
&lt;h3 id="51-会员收费事项景顺">5.1 会员收费事项（景顺）&lt;/h3>
&lt;p>目前只有17人继会，5位不要继会，6位新会友。&lt;/p>
&lt;h3 id="52-联合例会事项英伦">5.2 联合例会事项（英伦）&lt;/h3>
&lt;ul>
&lt;li>5.2.1 联合例会与威南例会共同进行，日期在十月十八日。&lt;/li>
&lt;li>5.2.2 建议一，只有两位备稿作业员，剩下的时间进行奇葩说。
建议二，如果威南坚持需要四位备稿作业员，剩下时间我们就进行即兴。
由英伦跟进。&lt;/li>
&lt;/ul>
&lt;h3 id="53-会员pathways-进度英伦">5.3 会员pathways 进度（英伦）&lt;/h3>
&lt;ul>
&lt;li>5.2.1 公开在例会中每个人的进度，目前五个人冲刺Level 5。&lt;/li>
&lt;li>5.2.2 每次例会都要安排最少一位新人初试啼声。&lt;/li>
&lt;li>5.2.3 公关把每个人的pathways完成level制作成海报宣传。&lt;/li>
&lt;/ul>
&lt;h3 id="54-oct-2022-mma--oc-景顺">5.4 Oct 2022 MMA ‼️ (OC 景顺)&lt;/h3>
&lt;ul>
&lt;li>5.4.1 29/10/2022 在Banyan Lepas晚上时间进行，细节部分由OC决定。&lt;/li>
&lt;/ul>
&lt;h3 id="55-会内比赛事项-英伦">5.5 会内比赛事项 (英伦)&lt;/h3>
&lt;ul>
&lt;li>5.5.1 十二月三日（星期六）进行，筹委会主席林容莉，总评审许彦章&lt;/li>
&lt;li>5.5.2 文教尽快在十一月份确认参赛者。&lt;/li>
&lt;/ul>
&lt;h3 id="56-彩带事项杨咏达">5.6 彩带事项（杨咏达）&lt;/h3>
&lt;ul>
&lt;li>5.6.1 杨咏达会跟进，计划十月十五日前解决设计，印刷由会长跟进，十一月前解决。&lt;/li>
&lt;li>5.6.2 一致通过我们用自行的设计不纳入讲演会logo。&lt;/li>
&lt;/ul>
&lt;h3 id="57-就职典礼照片与影片黄綉茹">5.7 就职典礼照片与影片（黄綉茹）&lt;/h3>
&lt;h3 id="58-装东西的盒子">5.8 装东西的盒子&lt;/h3>
&lt;p>礼宾司负责购买，27/10前处理好。&lt;/p>
&lt;h2 id="6-财政报告景顺">6. 财政报告（景顺）&lt;/h2>
&lt;p>目前Balance RM4,510.10&lt;/p>
&lt;p>提议：刘瑾镇&lt;/p>
&lt;p>复议：赖淑菁&lt;/p>
&lt;h2 id="7-下次会议日期">7. 下次会议日期&lt;/h2>
&lt;p>8/11/2022(星期二) 8:00pm Coffee Bean(AutoMall)&lt;/p>
&lt;p>提议：郑川宁&lt;/p>
&lt;p>复议：杨咏达&lt;/p>
&lt;h2 id="8-会议结束">8. 会议结束&lt;/h2>
&lt;p>提议： 庄英伦&lt;/p>
&lt;p>复议：张景顺&lt;/p>
&lt;h3 id="会议历时时1小时47分钟">会议历时时1小时47分钟&lt;/h3>
&lt;p>&lt;em>出席者&lt;/em>&lt;/p>
&lt;ol>
&lt;li>黄綉茹&lt;/li>
&lt;li>黄延玮&lt;/li>
&lt;li>张景顺&lt;/li>
&lt;li>庄英伦&lt;/li>
&lt;li>丘依慧&lt;/li>
&lt;li>杨咏达&lt;/li>
&lt;li>刘谨镇&lt;/li>
&lt;li>赖淑菁&lt;/li>
&lt;/ol>
&lt;p>&lt;em>缺席者&lt;/em>&lt;/p>
&lt;ol>
&lt;li>黄治铭&lt;/li>
&lt;li>江天佑&lt;/li>
&lt;li>胡志良&lt;/li>
&lt;/ol></description></item><item><title>九月执委会议</title><link>https://ytyeoh.github.io/tmc/reports/2022-09-08/</link><pubDate>Thu, 08 Sep 2022 15:43:48 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/reports/2022-09-08/</guid><description>&lt;p>&lt;em>TMC September Committee Meeting&lt;/em>&lt;/p>
&lt;p>Venue: Coffee Bean (Golden Triangle&lt;/p>
&lt;p>Time: 8:30&lt;/p>
&lt;p>Date: 8/9/2022&lt;/p>
&lt;p>会议议程：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>会长欢迎词 - 黄绣茹&lt;/p>
&lt;/li>
&lt;li>
&lt;p>确认会议议程（需提议与复议）一经确认需超过三分之二的出席者同意方能更改）- 黄绣茹&lt;/p>
&lt;/li>
&lt;li>
&lt;p>覆准前期议案（需提议与复议）- 杨咏达&lt;/p>
&lt;/li>
&lt;li>
&lt;p>前期议案引起事项（需要进一步跟进的项目）- 杨咏达&lt;/p>
&lt;/li>
&lt;li>
&lt;p>讨论事项：（一般如果没有重大争议事项可在3-5分钟内议决，如有争议让在场没人以不超过两分钟发表，并以不超过5分钟辩论做总结，如果仍无法决定可以延迟至下一个会议或成立小组讨论以提呈提案）- 黄绣茹&lt;/p>
&lt;/li>
&lt;li>
&lt;p>确认supplementary club &lt;br>
officer training Zoom 出席者（3分钟）
1）赖淑菁 ✅
2）张景顺✅
3）刘谨镇✅
执委都确定可以出席是项活动。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>财政报告（10分钟）- 张景顺&lt;/p>
&lt;/li>
&lt;li>
&lt;p>收费事项 - 张景顺&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>财政建议入会费cut off month 在明年2023年3月，之前已缴交RM320（注册费RM100+半年入会费RM220)但还未在TMC 网站注册的新会员，统统以RM340为这期的新入会费价格为标准。转单证据必须填写介绍人。&lt;/p>
&lt;ul>
&lt;li>财政提议每个月RM40。&lt;/li>
&lt;li>赞助人会赞助100报名费。&lt;/li>
&lt;li>会费分一年和半年。&lt;/li>
&lt;li>半年240， 一年480.报名费100.&lt;/li>
&lt;li>3月和9月cut off。
&lt;em>提议 ：庄英伦&lt;/em>
*附议：胡志良 *&lt;/li>
&lt;/ul>
&lt;ol start="9">
&lt;li>赞助商事项 - 黄绣茹&lt;/li>
&lt;/ol>
&lt;p>会长会提供资料给赞助人，之后赞助人会直接转账青商团秘书处并提供证据给财政。&lt;/p>
&lt;ul>
&lt;li>已付钱的人将会以转账的方式回扣80块。&lt;/li>
&lt;li>基于个人因素，暂定为神秘人赞助者不透露身份。&lt;/li>
&lt;li>赞助到31-12-2022截止日期，或20人为上限达标。先达标就停止提供。
&lt;em>提议：黄绣茹&lt;/em>
&lt;em>附议：赖淑菁&lt;/em>&lt;/li>
&lt;/ul>
&lt;ol start="10">
&lt;li>Pending New Member - 黄绣茹
有7个会友基于调整会费事项以及网上注册不完全，无法注册成为会友。财政张景顺已经更改google form可填写相关资料，会员副会长邓川宁将会跟进会员相关事项。&lt;/li>
&lt;li>企事路”演讲嘉宾及策划内容 - 黄延玮
主办企事路一年4场，会主办特别例会邀请嘉宾来分享。全部由丘依慧筹办。&lt;/li>
&lt;/ol>
&lt;p>&lt;em>提议：赖淑菁&lt;/em>
&lt;em>附议：刘谨镇&lt;/em>&lt;/p>
&lt;ol start="12">
&lt;li>9月份的活动策划及报告 - 黄绣茹
-9月份活动 （Eddie)
eddie提议歌唱，并提起有收到建议辩论或即席的活动。eddie还没确定主要活动，会招收委员然后展开工作。他已委托skyker为顾问，ruby负责营销。
活动将在提呈后于15号开始宣传。提议活动时间表如下：-&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>7点开始活动&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8点半即兴环节&lt;/p>
&lt;/li>
&lt;li>
&lt;p>9点半后继续歌唱&lt;/p>
&lt;/li>
&lt;li>
&lt;p>场地可以用到凌晨3点
歌唱不适合举行，所以会建议换活动。会长会和eddie沟通，并提议eddie高尔夫球。
&lt;em>提议：庄英伦&lt;/em>
&lt;em>附议：胡志良&lt;/em>&lt;/p>
&lt;p>-10月Jayden
jayden提议宠物咖啡馆，并只公开给讲演会会员。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol start="13">
&lt;li>
&lt;p>YES TMC FB page (英伦）
庄英伦会开办脸书专页，并由赖淑菁打理分享。
&lt;em>提议： 庄英伦&lt;/em>
&lt;em>附议：丘依慧&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>YES TMC 官方网站 （咏达）
设立官方网站展示kpi，秘书报告以及例会或新闻方便会员随时查看。
&lt;em>提议： 杨咏达&lt;/em>
&lt;em>附议：庄英伦&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>11月至12月份的非正式例会
或活动OC确认 （5分钟）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>11月 胡志良&lt;/li>
&lt;li>12月John Camping&lt;/li>
&lt;/ul>
&lt;ol start="16">
&lt;li>
&lt;p>优质分会奖 （15分钟）- 庄英伦
完成目标后会获得奖项，需要执委一起努力完成目标。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计划10月份一次联办例会分会 及例会日期（10分钟）- 庄英伦
10月4 号或者11号与威南或飞跃一起联办例会。庄英伦和黄绣茹会去跟进安排时间
&lt;em>提议：庄英伦&lt;/em>
&lt;em>附议：黄绣茹&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>会内备稿和评估比赛日期和人选(5分钟） - 庄英伦
由飞跃文教担任筹委会主席主办会内赛，基于参赛者有条件需求，庄英伦会甄选参赛人选。
&lt;em>提议： 庄英伦&lt;/em>
&lt;em>附议：丘依慧&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>布旗及 Roll up bunting（五分钟） - 黄延玮
因为旧会旗品质不佳，所以做过新会旗用于例会合照。第二个会旗将设置与五脚基门口，推广青商团及讲演会。
&lt;em>提议： 黄延玮&lt;/em>
&lt;em>附议： 黄绣茹&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>YES TMC 执委名片- 黄绣茹
会长欲打印讲演会名片以帮助推广讲演会，事项将于询问相关权限后才决定设计&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执委拍照：自费/赞助 - 黄绣茹
劲祥会赞助拍照于9月15号给讲演会执委及助理。必须穿正式服装比如西装。服装颜色是黑白，如分享图片于脸书请tag劲祥公司。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>彩带
彩带即将用完，即兴彩带已经用完，所以继续订购彩带，在等待期间会在本地定制彩带。相关设计会提交槟中总批准。
&lt;em>提议：黄绣茹&lt;/em>
&lt;em>附议：张景顺&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Kpi分数计算&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>YES KPI 分数叫 YES KPI, for YES TMC KPI 分数叫YES TMC EP( Excellent Point)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>YES TMC 新会员入会资料可以填写1个正及最多2个副介绍人。正介绍人会自动成为TMC new member sponsor person(必需是YES TMC active member.）
&lt;em>提议：黄延玮&lt;/em>
&lt;em>附议：黄綉茹&lt;/em>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol start="25">
&lt;li>下次会议日期时间 -杨咏达&lt;/li>
&lt;/ol>
&lt;p>每个月第一个星期二执委会议。当第一个星期二有冲突时就选第一个星期四
&lt;em>提议：杨咏达&lt;/em>
&lt;em>附议：张景顺&lt;/em>&lt;/p>
&lt;p>&lt;em>确认出席者&lt;/em>&lt;/p>
&lt;ol>
&lt;li>黄綉茹&lt;/li>
&lt;li>黄延玮&lt;/li>
&lt;li>莊英伦&lt;/li>
&lt;li>胡志良&lt;/li>
&lt;li>杨咏达&lt;/li>
&lt;li>丘依慧&lt;/li>
&lt;li>刘谨镇&lt;/li>
&lt;li>赖淑菁&lt;/li>
&lt;li>张景顺&lt;/li>
&lt;/ol></description></item><item><title>九月小组会议</title><link>https://ytyeoh.github.io/tmc/reports/2022-09-06/</link><pubDate>Tue, 06 Sep 2022 15:43:48 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/reports/2022-09-06/</guid><description>&lt;h1 id="会议内容">&lt;em>会议内容&lt;/em>&lt;/h1>
&lt;h2 id="tmc会员入会费财政报告">TMC会员入会费财政报告&lt;/h2>
&lt;p>财政建议入会费cut off month 在明年2023年3月，之前已缴交RM320（注册费RM100+半年入会费RM220)但还未在TMC 网站注册的新会员，统统以RM340为这期的新入会费价格为标准。&lt;/p>
&lt;ul>
&lt;li>财政提议每个月RM40。&lt;/li>
&lt;li>赞助人会赞助100报名费。&lt;/li>
&lt;li>会费分一年和半年。&lt;/li>
&lt;li>半年240， 一年480.报名费100.&lt;/li>
&lt;li>3月和9月cut off。&lt;/li>
&lt;/ul>
&lt;h2 id="赞助人讨论">赞助人讨论&lt;/h2>
&lt;p>会长会提供资料给赞助人，之后赞助人会直接转账并提供证据给财政。&lt;/p>
&lt;ul>
&lt;li>已付钱的人得到回馈20块。&lt;/li>
&lt;li>基于个人因素，暂定为神秘人赞助者不透露身份。&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="kpi分数">kpi分数&lt;/h2>
&lt;p>john会重新调整kpi分数系统，尤其是招收会员部分。最高3个推荐入会人。&lt;/p>
&lt;h2 id="9月活动">9月活动&lt;/h2>
&lt;p>eddie提议歌唱，并提起有收到建议辩论或即席的活动。eddie还没确定主要活动，会招收委员然后展开工作。他已委托skyker为顾问，ruby负责营销。&lt;/p>
&lt;p>活动将在提呈后于15号开始宣传。提议活动时间表如下：-&lt;/p>
&lt;ul>
&lt;li>7点开始活动&lt;/li>
&lt;li>8点半即兴环节&lt;/li>
&lt;li>9点半后继续歌唱&lt;/li>
&lt;li>场地可以用到凌晨3点&lt;/li>
&lt;/ul>
&lt;p>出席者&lt;/p>
&lt;ul>
&lt;li>john&lt;/li>
&lt;li>jayden&lt;/li>
&lt;li>tatt&lt;/li>
&lt;li>川宁&lt;/li>
&lt;li>绣茹&lt;/li>
&lt;li>志良&lt;/li>
&lt;li>eddie&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://ytyeoh.github.io/tmc/tmc/file/2022/9/1.png" alt="image1" title="image1">&lt;/p></description></item><item><title>八月执委会议</title><link>https://ytyeoh.github.io/tmc/reports/2022-07-31/</link><pubDate>Sun, 31 Jul 2022 15:43:48 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/reports/2022-07-31/</guid><description>&lt;h1 id="会议内容">&lt;em>会议内容&lt;/em>&lt;/h1>
&lt;h2 id="1-议决感恩就职yes-tmc-3周年庆暨yes-13周年小组庆日期时间及活动内容及邀请嘉宾oc团队人员">1. 议决感恩、就职、YES TMC 3周年庆暨YES 13周年小组庆日期、时间及活动内容及邀请嘉宾，OC团队人员&lt;/h2>
&lt;h3 id="就职典礼">就职典礼&lt;/h3>
&lt;ul>
&lt;li>活动必须覆盖13主题，比如13个团体或130个嘉宾，才能得到槟中总拨款。&lt;/li>
&lt;li>槟中总拨款可以最高1000。&lt;/li>
&lt;li>john于8月4号在青商执委会议提议该项活动。&lt;/li>
&lt;li>预估出席人数约40-50人&lt;/li>
&lt;li>YES TMC 会员+执委+助理 20人，青商团执委及会员15-20人，TMC 及非YES 会员5-10人。&lt;/li>
&lt;li>共两位vip青商一位，董事一位。&lt;/li>
&lt;li>如获得赞助多一位vip&lt;/li>
&lt;li>所有会员都需要付费&lt;/li>
&lt;li>一桌大约700块，收费98&lt;/li>
&lt;/ul>
&lt;h2 id="2-8月份及9月份oc-调整及活动计划书提呈事宜">2. 8月份及9月份OC 调整及活动计划书提呈事宜&lt;/h2>
&lt;ul>
&lt;li>oc会根据8月和9月活动灵活更换，会以就职典礼活动为主自行更换。&lt;/li>
&lt;/ul>
&lt;h2 id="3-完成cot-pre-work-执委讨论及总结">3. 完成COT Pre-work 执委讨论及总结&lt;/h2>
&lt;ul>
&lt;li>填写目标并提交表格，以下为即将提交表格。&lt;/li>
&lt;li>&lt;a href="https://ytyeoh.github.io/tmc/tmc/file/2022/8/1.pdf">表格1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ytyeoh.github.io/tmc/tmc/file/2022/8/2.pdf">表格2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ytyeoh.github.io/tmc/tmc/file/2022/8/3.pdf">表格3&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ytyeoh.github.io/tmc/tmc/file/2022/8/4.pdf">表格4&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="4-yes-tmc会员入会费财政报告">4. YES TMC会员入会费财政报告&lt;/h2>
&lt;p>财政建议入会费cut off month 在明年2023年3月，之前已缴交RM320（注册费RM100+半年入会费RM220)但还未在TMC 网站注册的新会员，统统以RM340为这期的新入会费价格为标准。&lt;/p>
&lt;h2 id="5-其他执委报告">5. 其他执委报告&lt;/h2>
&lt;p>卸任会长说，会员有招新人成为YES TMC 新会员，建议可以给新会员填多一或两位介绍人，毕竟新人能成为新会员幕后也有不少人在鼓励的，所以填多几位给YES TMC KPI 分数。&lt;/p>
&lt;h1 id="其他">其他&lt;/h1>
&lt;ul>
&lt;li>同一个新会员kpi分数推荐人可以达到最高3个。&lt;/li>
&lt;/ul></description></item><item><title>七月执委会议</title><link>https://ytyeoh.github.io/tmc/reports/2022-07-07/</link><pubDate>Thu, 07 Jul 2022 15:43:48 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/reports/2022-07-07/</guid><description>&lt;h1 id="七月执委会议">七月执委会议&lt;/h1>
&lt;p>地点：&lt;strong>渔人码头&lt;/strong>&lt;/p>
&lt;p>时间：8pm&lt;/p>
&lt;h2 id="1感恩会籍就职仪式8月份时间地点活动及颁奖内容">1）感恩会籍就职仪式8月份时间，地点，活动及颁奖内容&lt;/h2>
&lt;ul>
&lt;li>川宁主办8月活动，感恩之夜执委就职典礼。已和团长确定8月25，提议地点如下icon city 好时光、 ktv 我是歌手、Vangoh酒店。&lt;/li>
&lt;/ul>
&lt;h2 id="27月至9月份的例会主题及活动">2）7月至9月份的例会主题及活动&lt;/h2>
&lt;ul>
&lt;li>目前先用现有天佑依据之前提供的例会主题所设计的海报，公关也可以提早做好文案等任务。&lt;/li>
&lt;li>依之前提供的例会主题，执委内部稍后再来提早决定7-9月的例会主题。&lt;/li>
&lt;/ul>
&lt;h2 id="37月至9月份的非正式例会">3）7月至9月份的非正式例会&lt;/h2>
&lt;ul>
&lt;li>7月 OC 刘谨镇 水上活动&lt;/li>
&lt;li>8月 OC 郑川宁 执委就职典礼&lt;/li>
&lt;li>9月 OC 胡志良 未定&lt;/li>
&lt;li>10月 OC 张景顺 未定&lt;/li>
&lt;li>12月 OC 黄延玮 露营&lt;/li>
&lt;/ul>
&lt;h2 id="4q2分区资讯及活动报告">4）Q2分区资讯及活动报告&lt;/h2>
&lt;ul>
&lt;li>会长已经发送相关资料在群组里。&lt;/li>
&lt;li>出席8月6号cot执委培训。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;pre>&lt;code>Q区COT1
日期：6/8/2022（六）
地点：槟城中路福建会馆4楼冷气礼堂
时间：9am-630pm
原本是两天培训，已经争取在一天了。 请帮我问看执委团的出席率然后私讯给我知道。鼓励全员参与。
COT可以让执委了解职务， 还有和其他的分会执委做链接。
请会长和执委们在出席前阅读以下两本手册：
1. CS1111 杰出俱乐部项目及俱乐部发展计划。[键连](https://www.toastmasters.org/resources/distinguished-club-program-and-club-success-plan-simplified-chinese)
2. CS1310 俱乐部领导手册。[键连](https://www.toastmasters.org/resources/club-leadership-handbook-simplified-chinese)
温馨提醒：分会最少4个人出席才能获得DCP培训里的那0.5分。
&lt;/code>&lt;/pre>
&lt;hr>
&lt;pre>&lt;code>各位会长请注意，记得和分会秘书为全球年度大会做投票哦。[详情1](https://www.toastmasters.org/events/annual-business-meeting)
[详情2](https://www.toastmasters.org/2022proposals?utm_source=june-2022&amp;amp;utm_medium=club-actions-voting-proposals&amp;amp;utm_campaign=LL)
[下载](/tmc/file/2022/7/file.pdf)
这个是本次的一些建议，需要投票表决。
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="5yes-tmc-专属fb-page">5）YES TMC 专属FB page&lt;/h2>
&lt;ul>
&lt;li>同意办讲演会脸书专页。英伦准备提案书于青商会议。前任会长黄延纬负责提呈/&lt;/li>
&lt;/ul>
&lt;h2 id="6会员注册付款及链接">6）会员注册、付款及链接&lt;/h2>
&lt;ul>
&lt;li>提议先claim一些钱出来，之后再正式claim。前任会长黄延纬会在青商会议提出。&lt;/li>
&lt;/ul>
&lt;h2 id="7---yes-tmc-官方网站">7) YES TMC 官方网站&lt;/h2>
&lt;ul>
&lt;li>会长建议把部落格升格为槟中总青商团国际讲演会官方网站，并以其来公布一切相关资讯及新闻。&lt;/li>
&lt;/ul>
&lt;h2 id="8kpi记录">8）kpi记录&lt;/h2>
&lt;ul>
&lt;li>记录相关会员kpi分数活动。&lt;/li>
&lt;li>&lt;a href="https://ytyeoh.github.io/tmc/tmc/file/2022/7/kpi.xlsx">下载&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="9其它">9）其它&lt;/h2>
&lt;ul>
&lt;li>每次例会消费100左右，刘谨镇负责采购。提议晚餐之类的食物，可以早点抵达促进交流。&lt;/li>
&lt;li>记录kpi数据。&lt;/li>
&lt;/ul>
&lt;h3 id="出席者">&lt;em>出席者&lt;/em>&lt;/h3>
&lt;ol>
&lt;li>黄綉茹&lt;/li>
&lt;li>黄延玮&lt;/li>
&lt;li>庄英伦&lt;/li>
&lt;li>赖淑菁&lt;/li>
&lt;li>陈凯业&lt;/li>
&lt;li>杨咏达&lt;/li>
&lt;li>刘谨镇&lt;/li>
&lt;li>郑川宁&lt;/li>
&lt;li>江天佑&lt;/li>
&lt;li>张景顺&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://ytyeoh.github.io/tmc/tmc/file/2022/7/1.jpeg" alt="image1" title="image1">
&lt;img src="https://ytyeoh.github.io/tmc/tmc/file/2022/7/2.jpeg" alt="image2" title="image2">
&lt;img src="https://ytyeoh.github.io/tmc/tmc/file/2022/7/3.jpeg" alt="image3" title="image3">&lt;/p></description></item><item><title>Math Preview</title><link>https://ytyeoh.github.io/tmc/post/math-preview/</link><pubDate>Mon, 04 Mar 2019 16:01:23 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/post/math-preview/</guid><description>&lt;p>&lt;a href="https://www.intmath.com/cg5/katex-mathjax-comparison.php">KaTeX and MathJax Comparison Demo, currently processed as KaTex&lt;/a>&lt;/p>
&lt;h2 id="repeating-fractions">Repeating fractions&lt;/h2>
&lt;p>$$
\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} \equiv 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } }
$$&lt;/p>
&lt;h2 id="summation-notation">Summation notation&lt;/h2>
&lt;p>$$
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)
$$&lt;/p>
&lt;h2 id="sum-of-a-series">Sum of a Series&lt;/h2>
&lt;p>I broke up the next two examples into separate lines so it behaves better on a mobile phone. That&amp;rsquo;s why they include \displaystyle.&lt;/p>
&lt;p>$$
\displaystyle\sum_{i=1}^{k+1}i
$$&lt;/p>
&lt;p>$$
\displaystyle= \left(\sum_{i=1}^{k}i\right) +(k+1)
$$&lt;/p>
&lt;p>$$
\displaystyle= \frac{k(k+1)}{2}+k+1
$$&lt;/p>
&lt;p>$$
\displaystyle= \frac{k(k+1)+2(k+1)}{2}
$$&lt;/p>
&lt;p>$$
\displaystyle= \frac{(k+1)(k+2)}{2}
$$&lt;/p>
&lt;p>$$
\displaystyle= \frac{(k+1)((k+1)+1)}{2}
$$&lt;/p>
&lt;h2 id="product-notation">Product notation&lt;/h2>
&lt;p>$$
\displaystyle 1 + \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots = \displaystyle \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \displaystyle\text{ for }\lvert q\rvert &amp;lt; 1.
$$&lt;/p>
&lt;h2 id="inline-math">Inline math&lt;/h2>
&lt;p>And here is some in-line math: $$ k_{n+1} = n^2 + k_n^2 - k_{n-1} $$ , followed by some more text.&lt;/p>
&lt;h2 id="greek-letters">Greek Letters&lt;/h2>
&lt;p>$$
\Gamma\ \Delta\ \Theta\ \Lambda\ \Xi\ \Pi\ \Sigma\ \Upsilon\ \Phi\ \Psi\ \Omega
\alpha\ \beta\ \gamma\ \delta\ \epsilon\ \zeta\ \eta\ \theta\ \iota\ \kappa\ \lambda\ \mu\ \nu\ \xi \ \omicron\ \pi\ \rho\ \sigma\ \tau\ \upsilon\ \phi\ \chi\ \psi\ \omega\ \varepsilon\ \vartheta\ \varpi\ \varrho\ \varsigma\ \varphi
$$&lt;/p>
&lt;h2 id="arrows">Arrows&lt;/h2>
&lt;p>$$
\gets\ \to\ \leftarrow\ \rightarrow\ \uparrow\ \Uparrow\ \downarrow\ \Downarrow\ \updownarrow\ \Updownarrow
$$&lt;/p>
&lt;p>$$
\Leftarrow\ \Rightarrow\ \leftrightarrow\ \Leftrightarrow\ \mapsto\ \hookleftarrow
\leftharpoonup\ \leftharpoondown\ \rightleftharpoons\ \longleftarrow\ \Longleftarrow\ \longrightarrow
$$&lt;/p>
&lt;p>$$
\Longrightarrow\ \longleftrightarrow\ \Longleftrightarrow\ \longmapsto\ \hookrightarrow\ \rightharpoonup
$$&lt;/p>
&lt;p>$$
\rightharpoondown\ \leadsto\ \nearrow\ \searrow\ \swarrow\ \nwarrow
$$&lt;/p>
&lt;h2 id="symbols">Symbols&lt;/h2>
&lt;p>$$
\surd\ \barwedge\ \veebar\ \odot\ \oplus\ \otimes\ \oslash\ \circledcirc\ \boxdot\ \bigtriangleup
$$&lt;/p>
&lt;p>$$
\bigtriangledown\ \dagger\ \diamond\ \star\ \triangleleft\ \triangleright\ \angle\ \infty\ \prime\ \triangle
$$&lt;/p>
&lt;h2 id="calculus">Calculus&lt;/h2>
&lt;p>$$
\int u \frac{dv}{dx},dx=uv-\int \frac{du}{dx}v,dx
$$&lt;/p>
&lt;p>$$
f(x) = \int_{-\infty}^\infty \hat f(\xi),e^{2 \pi i \xi x}
$$&lt;/p>
&lt;p>$$
\oint \vec{F} \cdot d\vec{s}=0
$$&lt;/p>
&lt;h2 id="lorenz-equations">Lorenz Equations&lt;/h2>
&lt;p>$$
\begin{aligned} \dot{x} &amp;amp; = \sigma(y-x) \ \dot{y} &amp;amp; = \rho x - y - xz \ \dot{z} &amp;amp; = -\beta z + xy \end{aligned}
$$&lt;/p>
&lt;h2 id="cross-product">Cross Product&lt;/h2>
&lt;p>This works in KaTeX, but the separation of fractions in this environment is not so good.&lt;/p>
&lt;p>$$
\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp;amp; \mathbf{j} &amp;amp; \mathbf{k} \ \frac{\partial X}{\partial u} &amp;amp; \frac{\partial Y}{\partial u} &amp;amp; 0 \ \frac{\partial X}{\partial v} &amp;amp; \frac{\partial Y}{\partial v} &amp;amp; 0 \end{vmatrix}
$$&lt;/p>
&lt;p>Here&amp;rsquo;s a workaround: make the fractions smaller with an extra class that targets the spans with &amp;ldquo;mfrac&amp;rdquo; class (makes no difference in the MathJax case):&lt;/p>
&lt;p>$$
\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp;amp; \mathbf{j} &amp;amp; \mathbf{k} \ \frac{\partial X}{\partial u} &amp;amp; \frac{\partial Y}{\partial u} &amp;amp; 0 \ \frac{\partial X}{\partial v} &amp;amp; \frac{\partial Y}{\partial v} &amp;amp; 0 \end{vmatrix}
$$&lt;/p>
&lt;h2 id="accents">Accents&lt;/h2>
&lt;p>$$
\hat{x}\ \vec{x}\ \ddot{x}
$$&lt;/p>
&lt;h2 id="stretchy-brackets">Stretchy brackets&lt;/h2>
&lt;p>$$
\left(\frac{x^2}{y^3}\right)
$$&lt;/p>
&lt;h2 id="evaluation-at-limits">Evaluation at limits&lt;/h2>
&lt;p>$$
\left.\frac{x^3}{3}\right|_0^1
$$&lt;/p>
&lt;h2 id="case-definitions">Case definitions&lt;/h2>
&lt;p>$$
f(n) = \begin{cases} \frac{n}{2}, &amp;amp; \text{if } n\text{ is even} \ 3n+1, &amp;amp; \text{if } n\text{ is odd} \end{cases}
$$&lt;/p>
&lt;h2 id="maxwells-equations">Maxwell&amp;rsquo;s Equations&lt;/h2>
&lt;p>$$
\begin{aligned} \nabla \times \vec{\mathbf{B}} -, \frac1c, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp;amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \ \nabla \cdot \vec{\mathbf{E}} &amp;amp; = 4 \pi \rho \ \nabla \times \vec{\mathbf{E}}, +, \frac1c, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp;amp; = \vec{\mathbf{0}} \ \nabla \cdot \vec{\mathbf{B}} &amp;amp; = 0 \end{aligned}
$$&lt;/p>
&lt;p>These equations are quite cramped. We can add vertical spacing using (for example) [1em] after each line break (\). as you can see here:&lt;/p>
&lt;p>$$
\begin{aligned} \nabla \times \vec{\mathbf{B}} -, \frac1c, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp;amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \[1em] \nabla \cdot \vec{\mathbf{E}} &amp;amp; = 4 \pi \rho \[0.5em] \nabla \times \vec{\mathbf{E}}, +, \frac1c, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp;amp; = \vec{\mathbf{0}} \[1em] \nabla \cdot \vec{\mathbf{B}} &amp;amp; = 0 \end{aligned}
$$&lt;/p>
&lt;h2 id="statistics">Statistics&lt;/h2>
&lt;p>Definition of combination:&lt;/p>
&lt;p>$$
\frac{n!}{k!(n-k)!} = {^n}C_k
{n \choose k}
$$&lt;/p>
&lt;h2 id="fractions-on-fractions">Fractions on fractions&lt;/h2>
&lt;p>$$
\frac{\frac{1}{x}+\frac{1}{y}}{y-z}
$$&lt;/p>
&lt;h2 id="n-th-root">n-th root&lt;/h2>
&lt;p>$$
\sqrt[n]{1+x+x^2+x^3+\ldots}
$$&lt;/p>
&lt;h2 id="matrices">Matrices&lt;/h2>
&lt;p>$$
\begin{pmatrix} a_{11} &amp;amp; a_{12} &amp;amp; a_{13}\ a_{21} &amp;amp; a_{22} &amp;amp; a_{23}\ a_{31} &amp;amp; a_{32} &amp;amp; a_{33} \end{pmatrix}
\begin{bmatrix} 0 &amp;amp; \cdots &amp;amp; 0 \ \vdots &amp;amp; \ddots &amp;amp; \vdots \ 0 &amp;amp; \cdots &amp;amp; 0 \end{bmatrix}
$$&lt;/p>
&lt;h2 id="punctuation">Punctuation&lt;/h2>
&lt;p>$$
f(x) = \sqrt{1+x} \quad (x \ge -1)
f(x) \sim x^2 \quad (x\to\infty)
$$&lt;/p>
&lt;p>Now with punctuation:&lt;/p>
&lt;p>$$
f(x) = \sqrt{1+x}, \quad x \ge -1
f(x) \sim x^2, \quad x\to\infty
$$&lt;/p></description></item><item><title>Image Preview</title><link>https://ytyeoh.github.io/tmc/post/image-preview/</link><pubDate>Sat, 03 Mar 2018 16:01:23 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/post/image-preview/</guid><description>&lt;p>Thanks for &lt;a href="https://github.com/liwenyip/hugo-easy-gallery">liwenyip/hugo-easy-gallery&lt;/a> &amp;amp; &lt;a href="https://github.com/xianmin/hugo-theme-jane/pull/48">Zebradil · Pull Request #48&lt;/a> .&lt;/p>
&lt;p>Now, we could use &lt;code>{{&amp;lt; gallery &amp;gt;}}&lt;/code> shortcode in hugo-theme-jane.&lt;/p>
&lt;h2 id="normal-image">Normal Image&lt;/h2>
&lt;p>This is an image in &lt;code>static/image&lt;/code> folder.&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>![&lt;span style="color:#062873;font-weight:bold">This is an image in `static/image` folder.&lt;/span>](&lt;span style="color:#4070a0">/image/example.jpg&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="-figure--shortcode">&lt;code>{{&amp;lt; figure &amp;gt;}}&lt;/code> shortcode&lt;/h2>
&lt;h3 id="figure-image-with-title">figure image with title&lt;/h3>
&lt;pre tabindex="0">&lt;code>{{&amp;lt; figure src=&amp;#34;/image/example.jpg&amp;#34; title=&amp;#34;figure image with title&amp;#34; &amp;gt;}}
&lt;/code>&lt;/pre>&lt;h3 id="figure-image-with-caption">figure image with caption&lt;/h3>
&lt;pre tabindex="0">&lt;code>{{&amp;lt; figure src=&amp;#34;/image/example.jpg&amp;#34; caption=&amp;#34;figure image with caption figure image with caption figure image with caption figure image with caption figure image with caption&amp;#34; &amp;gt;}}
&lt;/code>&lt;/pre>&lt;h3 id="more--figure--shortcode-usage">more &lt;code>{{&amp;lt; figure &amp;gt;}}&lt;/code> shortcode usage&lt;/h3>
&lt;p>Specifying your image files:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{{&amp;lt; figure src=&amp;quot;thumb.jpg&amp;quot; link=&amp;quot;image.jpg&amp;quot; &amp;gt;}}&lt;/code> will use &lt;code>thumb.jpg&lt;/code> for thumbnail and &lt;code>image.jpg&lt;/code> for lightbox&lt;/li>
&lt;li>&lt;code>{{&amp;lt; figure src=&amp;quot;image.jpg&amp;quot; &amp;gt;}}&lt;/code> or &lt;code>{{&amp;lt; figure link=&amp;quot;image.jpg&amp;quot; &amp;gt;}}&lt;/code> will use &lt;code>image.jpg&lt;/code> for both thumbnail and lightbox&lt;/li>
&lt;li>&lt;code>{{&amp;lt; figure link=&amp;quot;image.jpg&amp;quot; thumb=&amp;quot;-small&amp;quot; &amp;gt;}}&lt;/code> will use &lt;code>image-small.jpg&lt;/code> for thumbnail and &lt;code>image.jpg&lt;/code> for lightbox&lt;/li>
&lt;/ul>
&lt;p>Optional parameters:&lt;/p>
&lt;ul>
&lt;li>All the &lt;a href="https://gohugo.io/extras/shortcodes">features/parameters&lt;/a> of Hugo&amp;rsquo;s built-in &lt;code>figure&lt;/code> shortcode work as normal, i.e. src, link, title, caption, class, attr (attribution), attrlink, alt&lt;/li>
&lt;li>&lt;code>size&lt;/code> (e.g. &lt;code>size=&amp;quot;1024x768&amp;quot;&lt;/code>) pre-defines the image size for PhotoSwipe. Use this option if you don&amp;rsquo;t want to pre-load the linked image to determine its size.&lt;/li>
&lt;li>&lt;code>class&lt;/code> allows you to set any custom classes you want on the &lt;code>&amp;lt;figure&amp;gt;&lt;/code> tag.&lt;/li>
&lt;/ul>
&lt;p>Optional parameters for standalone &lt;code>{{&amp;lt; figure &amp;gt;}}&lt;/code> shortcodes only (i.e. don&amp;rsquo;t use on &lt;code>{{&amp;lt; figure &amp;gt;}}&lt;/code> inside &lt;code>{{&amp;lt; gallery &amp;gt;}}&lt;/code> - strange things may happen if you do):&lt;/p>
&lt;ul>
&lt;li>&lt;code>caption-position&lt;/code> and &lt;code>caption-effect&lt;/code> work the same as for the &lt;code>{{&amp;lt; gallery &amp;gt;}}&lt;/code> shortcode (see below).&lt;/li>
&lt;li>&lt;code>width&lt;/code> defines the &lt;a href="https://www.w3schools.com/cssref/pr_dim_max-width.asp">&lt;code>max-width&lt;/code>&lt;/a> of the image displayed on the page. If using a thumbnail for a standalone figure, set this equal to your thumbnail&amp;rsquo;s native width to make the captions behave properly (or feel free to come up with a better solution and submit a pull request :-)). Also use this option if you don&amp;rsquo;t have a thumbnail and you don&amp;rsquo;t want the hi-res image to take up the entire width of the screen/container.&lt;/li>
&lt;li>&lt;code>class=&amp;quot;no-photoswipe&amp;quot;&lt;/code> prevents a &lt;code>&amp;lt;figure&amp;gt;&lt;/code> from being loaded into PhotoSwipe. If you click on the figure you&amp;rsquo;ll instead a good ol&amp;rsquo; fashioned hyperlink to a bigger image (or - if you haven&amp;rsquo;t specified a bigger image - the same one).&lt;/li>
&lt;/ul>
&lt;h2 id="-gallery--shortcode">&lt;code>{{&amp;lt; gallery &amp;gt;}}&lt;/code> shortcode&lt;/h2>
&lt;h3 id="simple-gallery">simple gallery&lt;/h3>
&lt;p>To specify a directory of image files:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{&amp;lt; gallery dir=&amp;#34;/img/your-directory-of-images/&amp;#34; &amp;gt;}}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>The images are automatically captioned with the file name.&lt;/li>
&lt;li>&lt;code>[image].jpg&lt;/code> is used for the hi-res image, and &lt;code>[image]-thumb.jpg&lt;/code> is used for the thumbnails.&lt;/li>
&lt;li>If &lt;code>[image]-thumb.jpg&lt;/code> doesn&amp;rsquo;t exist, then &lt;code>[image].jpg&lt;/code> will be used for both hi-res and thumbnail images.&lt;/li>
&lt;li>The default thumbnail suffix is &lt;code>-thumb&lt;/code>, but you can specify a different one e.g. &lt;code>thumb=&amp;quot;-small&amp;quot;&lt;/code> or &lt;code>thumb=&amp;quot;_150x150&amp;quot;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="to-specify-individual-image-files">To specify individual image files&lt;/h3>
&lt;pre tabindex="0">&lt;code>{{&amp;lt; gallery &amp;gt;}}
{{&amp;lt; figure src=&amp;#34;image1.jpg&amp;#34; &amp;gt;}}
{{&amp;lt; figure src=&amp;#34;image2.jpg&amp;#34; &amp;gt;}}
{{&amp;lt; figure src=&amp;#34;image3.jpg&amp;#34; &amp;gt;}}
{{&amp;lt; /gallery &amp;gt;}}
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Optional parameters:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>caption-position&lt;/code> - determines the captions&amp;rsquo; position over the image. Options:
&lt;ul>
&lt;li>&lt;code>bottom&lt;/code> (default)&lt;/li>
&lt;li>&lt;code>center&lt;/code>&lt;/li>
&lt;li>&lt;code>none&lt;/code> hides captions on the page (they will only show in PhotoSwipe)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>caption-effect&lt;/code> - determines if/how captions appear upon hover. Options:
&lt;ul>
&lt;li>&lt;code>slide&lt;/code> (default)&lt;/li>
&lt;li>&lt;code>fade&lt;/code>&lt;/li>
&lt;li>&lt;code>none&lt;/code> (captions always visible)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>hover-effect&lt;/code> - determines if/how images change upon hover. Options:
&lt;ul>
&lt;li>&lt;code>zoom&lt;/code> (default)&lt;/li>
&lt;li>&lt;code>grow&lt;/code>&lt;/li>
&lt;li>&lt;code>shrink&lt;/code>&lt;/li>
&lt;li>&lt;code>slideup&lt;/code>&lt;/li>
&lt;li>&lt;code>slidedown&lt;/code>&lt;/li>
&lt;li>&lt;code>none&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>hover-transition&lt;/code> - determines if/how images change upon hover. Options:
&lt;ul>
&lt;li>not set - smooth transition (default)&lt;/li>
&lt;li>&lt;code>none&lt;/code> - hard transition&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Jane-Theme Footnote Preview</title><link>https://ytyeoh.github.io/tmc/post/doc-footnote-preview/</link><pubDate>Thu, 01 Mar 2018 16:01:23 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/post/doc-footnote-preview/</guid><description>&lt;p>Hugo-theme-jane optimized for footnote. When you mouse hover the footnote&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> , footnote content will be displayed.&lt;/p>
&lt;h2 id="footnote-1">Footnote-1&lt;/h2>
&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>You can create footnotes like this[^footnote].
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[^footnote]: Here is the &lt;span style="font-style:italic">*text*&lt;/span> of the &lt;span style="font-weight:bold">**footnote**&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>will produce:&lt;/p>
&lt;p>You can create footnotes like this&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Mouse on the ‘footnote’ superscript to see content of the footnote.&lt;/p>
&lt;h2 id="footnote-2">Footnote-2&lt;/h2>
&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>You can create footnotes like this[^footnote2].
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[^footnote2]: Here is the &lt;span style="font-style:italic">*text*&lt;/span> of the &lt;span style="font-weight:bold">**footnote**&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>will produce:&lt;/p>
&lt;p>You can create footnotes like this&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Mouse on the ‘footnote’ superscript to see content of the footnote.&lt;/p>
&lt;h2 id="footnote-3">Footnote-3&lt;/h2>
&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-2-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-2-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-2-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>You can create footnotes like this[^footnote].
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[^footnote]: Here is the &lt;span style="font-style:italic">*text*&lt;/span> of the &lt;span style="font-weight:bold">**footnote**&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>will produce:&lt;/p>
&lt;p>You can create footnotes like this&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Mouse on the ‘footnote’ superscript to see content of the footnote.&lt;/p>
&lt;h2 id="footnote-4">Footnote-4&lt;/h2>
&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-3-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-3-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-3-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-3-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-3-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-3-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>You can create footnotes like this[^footnote].
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[^footnote]: Here is the &lt;span style="font-style:italic">*text*&lt;/span> of the &lt;span style="font-weight:bold">**footnote**&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>will produce:&lt;/p>
&lt;p>You can create footnotes like this&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Mouse on the ‘footnote’ superscript to see content of the footnote.&lt;/p>
&lt;h2 id="footnote-5">Footnote-5&lt;/h2>
&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-4-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-4-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-4-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>You can create footnotes like this[^footnote].
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[^footnote]: Here is the &lt;span style="font-style:italic">*text*&lt;/span> of the &lt;span style="font-weight:bold">**footnote**&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>will produce dddddddddddddddddddddddddddddddddddddddddddddd:&lt;/p>
&lt;p>You can create footnotes like this&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Mouse on the ‘footnote’ superscript to see content of the footnote.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>example footnote show.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Here is the &lt;em>text&lt;/em> of the &lt;strong>footnote-1&lt;/strong>.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>Here is the &lt;em>text&lt;/em> of the &lt;strong>footnote-2&lt;/strong>. Here is the text of the footnote-2. Here is the text of the footnote-2. Here is the text of the footnote-2. Here is the text of the footnote-2. &lt;a href="https://gohugo.io/">The world’s fastest framework for building websites | Hugo&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>Here is the &lt;em>text&lt;/em> of the &lt;strong>footnote-3&lt;/strong>.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>Here is the &lt;em>text&lt;/em> of the &lt;strong>footnote-4&lt;/strong>.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>Here is the &lt;em>text&lt;/em> of the &lt;strong>footnote-5&lt;/strong>.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>English Creating a New Theme</title><link>https://ytyeoh.github.io/tmc/post/english-preview/</link><pubDate>Thu, 31 Aug 2017 15:43:48 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/post/english-preview/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.&lt;/p>
&lt;p>We&amp;rsquo;ll start with creating a new site with a very basic template. Then we&amp;rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.&lt;/p>
&lt;p>In this tutorial, commands that you enter will start with the &amp;ldquo;$&amp;rdquo; prompt. The output will follow. Lines that start with &amp;ldquo;#&amp;rdquo; are comments that I&amp;rsquo;ve added to explain a point. When I show updates to a file, the &amp;ldquo;:wq&amp;rdquo; on the last line means to save the file.&lt;/p>
&lt;p>Here&amp;rsquo;s an example:&lt;/p>
&lt;pre tabindex="0">&lt;code>## this is a comment
$ echo this is a command
this is a command
## edit the file
$vi foo.md
+++
date = &amp;#34;2014-09-28&amp;#34;
title = &amp;#34;creating a new theme&amp;#34;
+++
bah and humbug
:wq
## show it
$ cat foo.md
+++
date = &amp;#34;2014-09-28&amp;#34;
title = &amp;#34;creating a new theme&amp;#34;
+++
bah and humbug
$
&lt;/code>&lt;/pre>&lt;h2 id="some-definitions">Some Definitions&lt;/h2>
&lt;p>There are a few concepts that you need to understand before creating a theme.&lt;/p>
&lt;h3 id="skins">Skins&lt;/h3>
&lt;p>Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.&lt;/p>
&lt;p>You have two ways to create a skin. The simplest way is to create it in the &lt;code>layouts/&lt;/code> directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the &lt;code>layouts/&lt;/code> directory so it will always find the skin.&lt;/p>
&lt;p>Your second choice is to create it in a sub-directory of the &lt;code>themes/&lt;/code> directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?&lt;/p>
&lt;p>The difference between creating a skin in &lt;code>layouts/&lt;/code> and creating it in &lt;code>themes/&lt;/code> is very subtle. A skin in &lt;code>layouts/&lt;/code> can’t be customized without updating the templates and static files that it is built from. A skin created in &lt;code>themes/&lt;/code>, on the other hand, can be and that makes it easier for other people to use it.&lt;/p>
&lt;p>The rest of this tutorial will call a skin created in the &lt;code>themes/&lt;/code> directory a theme.&lt;/p>
&lt;p>Note that you can use this tutorial to create a skin in the &lt;code>layouts/&lt;/code> directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.&lt;/p>
&lt;h3 id="the-home-page">The Home Page&lt;/h3>
&lt;p>The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.&lt;/p>
&lt;h3 id="site-configuration-file">Site Configuration File&lt;/h3>
&lt;p>When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.&lt;/p>
&lt;p>Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your &lt;code>content/&lt;/code> directory and template files in your &lt;code>themes/&lt;/code> directory. It will create HTML files in your &lt;code>public/&lt;/code> directory. You can change this by specifying alternate locations in the configuration file.&lt;/p>
&lt;h3 id="content">Content&lt;/h3>
&lt;p>Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.&lt;/p>
&lt;h4 id="front-matter">Front Matter&lt;/h4>
&lt;p>The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “&lt;code>+++&lt;/code>”, YAML by “&lt;code>---&lt;/code>”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.&lt;/p>
&lt;p>The information in the front matter is passed into the template before the content is rendered into HTML.&lt;/p>
&lt;h4 id="markdown">Markdown&lt;/h4>
&lt;p>Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.&lt;/p>
&lt;h3 id="template-files">Template Files&lt;/h3>
&lt;p>Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&amp;rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.&lt;/p>
&lt;p>There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.&lt;/p>
&lt;p>Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.&lt;/p>
&lt;p>Please note that you can use the front matter to influence Hugo’s choice of templates.&lt;/p>
&lt;h4 id="single-template">Single Template&lt;/h4>
&lt;p>A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.&lt;/p>
&lt;h4 id="list-template">List Template&lt;/h4>
&lt;p>A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.&lt;/p>
&lt;p>The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.&lt;/p>
&lt;h4 id="partial-template">Partial Template&lt;/h4>
&lt;p>A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.&lt;/p>
&lt;h2 id="create-a-new-site">Create a New Site&lt;/h2>
&lt;p>Let&amp;rsquo;s use Hugo to create a new web site. I&amp;rsquo;m a Mac user, so I&amp;rsquo;ll create mine in my home directory, in the Sites folder. If you&amp;rsquo;re using Linux, you might have to create the folder first.&lt;/p>
&lt;p>The &amp;ldquo;new site&amp;rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .
drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;p>Take a look in the content/ directory to confirm that it is empty.&lt;/p>
&lt;p>The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&amp;rsquo;s a topic for a different tutorial, so please ignore them for now.&lt;/p>
&lt;h3 id="generate-the-html-for-the-new-site">Generate the HTML For the New Site&lt;/h3>
&lt;p>Running the &lt;code>hugo&lt;/code> command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&amp;rsquo;s everything that&amp;rsquo;s not content). Since we have an empty site, it won&amp;rsquo;t do much, but it will do it very quickly.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;p>The &amp;ldquo;&lt;code>--verbose&lt;/code>&amp;rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &amp;ldquo;INFO:&amp;rdquo; or &amp;ldquo;WARN:&amp;rdquo; is present because we used that flag. The lines that start with &amp;ldquo;WARN:&amp;rdquo; are warning messages. We&amp;rsquo;ll go over them later.&lt;/p>
&lt;p>We can verify that the command worked by looking at the directory again.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;p>See that new public/ directory? Hugo placed all generated content there. When you&amp;rsquo;re ready to publish your web site, that&amp;rsquo;s the place to start. For now, though, let&amp;rsquo;s just confirm that we have what we&amp;rsquo;d expect from a site with no content.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l public
total 16
-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml
-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;p>Hugo created two XML files, which is standard, but there are no HTML files.&lt;/p>
&lt;h3 id="test-the-new-site">Test the New Site&lt;/h3>
&lt;p>Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &amp;ldquo;server&amp;rdquo; command. If it is successful, you will see output similar to the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code>&lt;/pre>&lt;p>Connect to the listed URL (it&amp;rsquo;s on the line that starts with &amp;ldquo;Web Server&amp;rdquo;). If everything is working correctly, you should get a page that shows the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>index.xml
sitemap.xml
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s a listing of your public/ directory. Hugo didn&amp;rsquo;t create a home page because our site has no content. When there&amp;rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.&lt;/p>
&lt;p>Let’s go back and look at those warnings again.&lt;/p>
&lt;pre tabindex="0">&lt;code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
&lt;/code>&lt;/pre>&lt;p>That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.&lt;/p>
&lt;p>Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.&lt;/p>
&lt;p>I like that the verbose flag causes Hugo to list the files that it&amp;rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&amp;rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&amp;rsquo;t find a template for the home page and it told you so.&lt;/p>
&lt;p>At this point, you&amp;rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.&lt;/p>
&lt;h2 id="create-a-new-theme">Create a New Theme&lt;/h2>
&lt;p>Hugo doesn&amp;rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.&lt;/p>
&lt;p>We&amp;rsquo;re going to create a new theme called &amp;ldquo;zafta.&amp;rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.&lt;/p>
&lt;p>All themes have opinions on content and layout. For example, Zafta uses &amp;ldquo;post&amp;rdquo; over &amp;ldquo;blog&amp;rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.&lt;/p>
&lt;h3 id="create-a-skeleton">Create a Skeleton&lt;/h3>
&lt;p>Use the hugo &amp;ldquo;new&amp;rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo new theme zafta
$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes
$ find themes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml
$
&lt;/code>&lt;/pre>&lt;p>The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.&lt;/p>
&lt;p>Please take a minute to fill out the theme.toml and LICENSE.md files. They&amp;rsquo;re optional, but if you&amp;rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&amp;rsquo;s also nice to declare the license so that people will know how they can use the theme.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/theme.toml
author = &amp;#34;michael d henderson&amp;#34;
description = &amp;#34;a minimal working template&amp;#34;
license = &amp;#34;MIT&amp;#34;
name = &amp;#34;zafta&amp;#34;
source_repo = &amp;#34;&amp;#34;
tags = [&amp;#34;tags&amp;#34;, &amp;#34;categories&amp;#34;]
:wq
## also edit themes/zafta/LICENSE.md and change
## the bit that says &amp;#34;YOUR_NAME_HERE&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Note that the the skeleton&amp;rsquo;s template files are empty. Don&amp;rsquo;t worry, we&amp;rsquo;ll be changing that shortly.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
&lt;/code>&lt;/pre>&lt;h3 id="update-the-configuration-file-to-use-the-theme">Update the Configuration File to Use the Theme&lt;/h3>
&lt;p>Now that we&amp;rsquo;ve got a theme to work with, it&amp;rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &amp;ldquo;-t zafta&amp;rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&amp;rsquo;t put it in the configuration file or specify it on the command line, you won&amp;rsquo;t use the template that you&amp;rsquo;re expecting to.&lt;/p>
&lt;p>Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi config.toml
theme = &amp;#34;zafta&amp;#34;
baseurl = &amp;#34;&amp;#34;
languageCode = &amp;#34;en-us&amp;#34;
title = &amp;#34;zafta - totally refreshing&amp;#34;
MetaDataFormat = &amp;#34;toml&amp;#34;
:wq
$
&lt;/code>&lt;/pre>&lt;h3 id="generate-the-site">Generate the Site&lt;/h3>
&lt;p>Now that we have an empty theme, let&amp;rsquo;s generate the site again.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;p>Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&amp;rsquo;s directory.&lt;/p>
&lt;p>Let&amp;rsquo;s check the public/ directory to see what Hugo&amp;rsquo;s created.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l public
total 16
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css
-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html
-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js
-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;p>Notice four things:&lt;/p>
&lt;ol>
&lt;li>Hugo created a home page. This is the file public/index.html.&lt;/li>
&lt;li>Hugo created a css/ directory.&lt;/li>
&lt;li>Hugo created a js/ directory.&lt;/li>
&lt;li>Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&amp;rsquo;t create any pages. That&amp;rsquo;s because it considers a &amp;ldquo;page&amp;rdquo; to be a file created directly from a content file. It doesn&amp;rsquo;t count things like the index.html files that it creates automatically.&lt;/li>
&lt;/ol>
&lt;h4 id="the-home-page-1">The Home Page&lt;/h4>
&lt;p>Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&amp;rsquo;s warning message shows that it looks for three different templates:&lt;/p>
&lt;pre tabindex="0">&lt;code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
&lt;/code>&lt;/pre>&lt;p>If it can&amp;rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.&lt;/p>
&lt;p>When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find . -name index.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$
&lt;/code>&lt;/pre>&lt;h4 id="the-magic-of-static">The Magic of Static&lt;/h4>
&lt;p>Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.&lt;/p>
&lt;p>Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&amp;rsquo;s opinion is that you&amp;rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&amp;rsquo;t like that, you can change the directory names in your theme directory or jane delete them completely. Hugo&amp;rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js
$
&lt;/code>&lt;/pre>&lt;h2 id="the-theme-development-cycle">The Theme Development Cycle&lt;/h2>
&lt;p>When you&amp;rsquo;re working on a theme, you will make changes in the theme&amp;rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:&lt;/p>
&lt;ol>
&lt;li>Purge the public/ directory.&lt;/li>
&lt;li>Run the built in web server in watch mode.&lt;/li>
&lt;li>Open your site in a browser.&lt;/li>
&lt;li>Update the theme.&lt;/li>
&lt;li>Glance at your browser window to see changes.&lt;/li>
&lt;li>Return to step 4.&lt;/li>
&lt;/ol>
&lt;p>I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.&lt;/p>
&lt;p>Check the main Hugo site for information on using Git with Hugo.&lt;/p>
&lt;h3 id="purge-the-public-directory">Purge the public/ Directory&lt;/h3>
&lt;p>When generating the site, Hugo will create new files and update existing ones in the &lt;code>public/&lt;/code> directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.&lt;/p>
&lt;p>Note: If you&amp;rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.&lt;/p>
&lt;h3 id="hugos-watch-option">Hugo&amp;rsquo;s Watch Option&lt;/h3>
&lt;p>Hugo&amp;rsquo;s &amp;ldquo;&lt;code>--watch&lt;/code>&amp;rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.&lt;/p>
&lt;h3 id="live-reload">Live Reload&lt;/h3>
&lt;p>Hugo&amp;rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &amp;ldquo;Wow, that&amp;rsquo;s totally amazing.&amp;rdquo;&lt;/p>
&lt;h3 id="development-commands">Development Commands&lt;/h3>
&lt;p>Use the following commands as the basis for your workflow.&lt;/p>
&lt;pre tabindex="0">&lt;code>## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
&lt;/code>&lt;/pre>&lt;p>Here&amp;rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&amp;rsquo;ve said this before, it&amp;rsquo;s amazing.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&amp;#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&amp;#34;: MODIFY|ATTRIB]
Change detected, rebuilding site
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 1 ms
&lt;/code>&lt;/pre>&lt;h2 id="update-the-home-page-template">Update the Home Page Template&lt;/h2>
&lt;p>The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&amp;rsquo;s layout/ directory:&lt;/p>
&lt;ol>
&lt;li>index.html&lt;/li>
&lt;li>_default/list.html&lt;/li>
&lt;li>_default/single.html&lt;/li>
&lt;/ol>
&lt;p>We could update one of the default templates, but a good design decision is to update the most specific template available. That&amp;rsquo;s not a hard and fast rule (in fact, we&amp;rsquo;ll break it a few times in this tutorial), but it is a good generalization.&lt;/p>
&lt;h3 id="make-a-static-home-page">Make a Static Home Page&lt;/h3>
&lt;p>Right now, that page is empty because we don&amp;rsquo;t have any content and we don&amp;rsquo;t have any logic in the template. Let&amp;rsquo;s change that by adding some text to the template.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="live-reload-1">Live Reload&lt;/h4>
&lt;p>Note: If you&amp;rsquo;re running the server with the &lt;code>--watch&lt;/code> option, you&amp;rsquo;ll see different content in the file:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;script src=&amp;#34;http://&amp;#39;
+ (location.host || &amp;#39;localhost&amp;#39;).split(&amp;#39;:&amp;#39;)[0]
+ &amp;#39;:1313/livereload.js?mindelay=10&amp;#34;&amp;gt;&amp;lt;/&amp;#39;
+ &amp;#39;script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>When you use &lt;code>--watch&lt;/code>, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.&lt;/p>
&lt;h3 id="build-a-dynamic-home-page">Build a &amp;ldquo;Dynamic&amp;rdquo; Home Page&lt;/h3>
&lt;p>&amp;ldquo;Dynamic home page?&amp;rdquo; Hugo&amp;rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&amp;rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&amp;rsquo;ll use iteration in the template to do that.&lt;/p>
&lt;h4 id="create-new-posts">Create New Posts&lt;/h4>
&lt;p>Now that we have the home page generating static content, let&amp;rsquo;s add some content to the site. We&amp;rsquo;ll display these posts as a list on the home page and on their own page, too.&lt;/p>
&lt;p>Hugo has a command to generate a skeleton post, just like it does for sites and themes.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &amp;lt;nil&amp;gt; to map[string]interface{}
$
&lt;/code>&lt;/pre>&lt;p>That wasn&amp;rsquo;t very nice, was it?&lt;/p>
&lt;p>The &amp;ldquo;new&amp;rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there&amp;rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/archetypes/post.md
+++
Description = &amp;#34;&amp;#34;
Tags = []
Categories = []
+++
:wq
$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md
$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created
$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created
$ ls -l content/post
total 16
-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md
-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md
$ cat content/post/first.md
+++
Categories = []
Description = &amp;#34;&amp;#34;
Tags = []
date = &amp;#34;2014-09-29T21:54:53-05:00&amp;#34;
title = &amp;#34;first&amp;#34;
+++
my first post
$ cat content/post/second.md
+++
Categories = []
Description = &amp;#34;&amp;#34;
Tags = []
date = &amp;#34;2014-09-29T21:57:09-05:00&amp;#34;
title = &amp;#34;second&amp;#34;
+++
my second post
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;, &amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$
&lt;/code>&lt;/pre>&lt;p>The output says that it created 2 pages. Those are our new posts:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html
$
&lt;/code>&lt;/pre>&lt;p>The new files are empty because because the templates used to generate the content are empty. The homepage doesn&amp;rsquo;t show the new content, either. We have to update the templates to add the posts.&lt;/p>
&lt;h3 id="list-and-single-templates">List and Single Templates&lt;/h3>
&lt;p>In Hugo, we have three major kinds of templates. There&amp;rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &amp;ldquo;single&amp;rdquo; templates which are used to generate output for a single content file. We also have &amp;ldquo;list&amp;rdquo; templates that are used to group multiple pieces of content before generating output.&lt;/p>
&lt;p>Generally speaking, list templates are named &amp;ldquo;list.html&amp;rdquo; and single templates are named &amp;ldquo;single.html.&amp;rdquo;&lt;/p>
&lt;p>There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.&lt;/p>
&lt;h3 id="add-content-to-the-homepage">Add Content to the Homepage&lt;/h3>
&lt;p>The home page will contain a list of posts. Let&amp;rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &amp;ldquo;{{&amp;rdquo; and &amp;ldquo;}}&amp;rdquo;. In our template, the commands are:&lt;/p>
&lt;ol>
&lt;li>range&lt;/li>
&lt;li>.Title&lt;/li>
&lt;li>end&lt;/li>
&lt;/ol>
&lt;p>The &amp;ldquo;range&amp;rdquo; command is an iterator. We&amp;rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.&lt;/p>
&lt;p>The &amp;ldquo;.Title&amp;rdquo; command prints the value of the &amp;ldquo;title&amp;rdquo; variable. Hugo pulls it from the front matter in the Markdown file.&lt;/p>
&lt;p>The &amp;ldquo;end&amp;rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &amp;ldquo;end.&amp;rdquo; Everything between the &amp;ldquo;range&amp;rdquo; and &amp;ldquo;end&amp;rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.&lt;/p>
&lt;p>It&amp;rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.&lt;/p>
&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;p>Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let&amp;rsquo;s take a moment to appreciate what we&amp;rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&amp;rsquo;ve learned everything you need to know to build a theme. All that&amp;rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.&lt;/p>
&lt;p>And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&amp;rsquo;t worry, though, that&amp;rsquo;s all to come.&lt;/p>
&lt;h3 id="add-content-to-the-posts">Add Content to the Posts&lt;/h3>
&lt;p>We&amp;rsquo;re working with posts, which are in the content/post/ directory. That means that their section is &amp;ldquo;post&amp;rdquo; (and if we don&amp;rsquo;t do something weird, their type is also &amp;ldquo;post&amp;rdquo;).&lt;/p>
&lt;p>Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can&amp;rsquo;t find one, then it will look in the _default/ directory. There are some twists that we&amp;rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.&lt;/p>
&lt;p>Now that we know the search rule, let&amp;rsquo;s see what we actually have available:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
&lt;/code>&lt;/pre>&lt;p>We could create a new template, post/single.html, or change the default. Since we don&amp;rsquo;t know of any other content types, let&amp;rsquo;s start with updating the default.&lt;/p>
&lt;p>Remember, any content that we haven&amp;rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&amp;rsquo;re going to be adding different types of content and we&amp;rsquo;re going to end up undoing some of the changes we&amp;rsquo;ve made. It&amp;rsquo;s good because we&amp;rsquo;ll be able to see immediate results. It&amp;rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&amp;rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&amp;rsquo;ll accept the cost and proceed.&lt;/p>
&lt;p>Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&amp;rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&amp;rsquo;s a refreshing amount of joy right there.&lt;/p>
&lt;h4 id="update-the-template-file">Update the Template File&lt;/h4>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html
$ cat public/post/first/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;first&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;my first post&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$ cat public/post/second/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;second&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;my second post&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;p>Notice that the posts now have content. You can go to localhost:1313/post/first to verify.&lt;/p>
&lt;h3 id="linking-to-content">Linking to Content&lt;/h3>
&lt;p>The posts are on the home page. Let&amp;rsquo;s add a link from there to the post. Since this is the home page, we&amp;rsquo;ll update its template.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Build the web site and verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;/post/second/&amp;#34;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;/post/first/&amp;#34;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;h3 id="create-a-post-listing">Create a Post Listing&lt;/h3>
&lt;p>We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let&amp;rsquo;s make it show a list of all posts (not just the first ten).&lt;/p>
&lt;p>We need to decide which template to update. This will be a listing, so it should be a list template. Let&amp;rsquo;s take a quick look and see which list templates are available.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
&lt;/code>&lt;/pre>&lt;p>As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don&amp;rsquo;t have multiple content types, so let&amp;rsquo;s stay consistent and update the default list template.&lt;/p>
&lt;h2 id="creating-top-level-pages">Creating Top Level Pages&lt;/h2>
&lt;p>Let&amp;rsquo;s add an &amp;ldquo;about&amp;rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).&lt;/p>
&lt;p>The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let&amp;rsquo;s verify that by creating an &amp;ldquo;about&amp;rdquo; page at the top level:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi content/about.md
+++
title = &amp;#34;about&amp;#34;
description = &amp;#34;about this site&amp;#34;
date = &amp;#34;2014-09-27&amp;#34;
slug = &amp;#34;about time&amp;#34;
+++
## about us
i&amp;#39;m speechless
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html
&lt;/code>&lt;/pre>&lt;p>Notice that the page wasn&amp;rsquo;t created at the top level. It was created in a sub-directory named &amp;lsquo;about-time/&amp;rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It&amp;rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.&lt;/p>
&lt;p>One other thing. Take a look at the home page.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/theme/&amp;#34;&amp;gt;creating a new theme&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/about-time/&amp;#34;&amp;gt;about&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/second-post/&amp;#34;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/first-post/&amp;#34;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;script src=&amp;#34;http://&amp;#39;
+ (location.host || &amp;#39;localhost&amp;#39;).split(&amp;#39;:&amp;#39;)[0]
+ &amp;#39;:1313/livereload.js?mindelay=10&amp;#34;&amp;gt;&amp;lt;/&amp;#39;
+ &amp;#39;script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Notice that the &amp;ldquo;about&amp;rdquo; link is listed with the posts? That&amp;rsquo;s not desirable, so let&amp;rsquo;s change that first.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;#34;post&amp;#34;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if eq .Type &amp;#34;page&amp;#34; }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.&lt;/p>
&lt;p>But, that about page still renders to about-time/index.html.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html
&lt;/code>&lt;/pre>&lt;p>Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let&amp;rsquo;s do it the hard way and change the permalink in the configuration file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi config.toml
[permalinks]
page = &amp;#34;/:title/&amp;#34;
about = &amp;#34;/:filename/&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify that this didn&amp;rsquo;t work. Hugo lets &amp;ldquo;slug&amp;rdquo; or &amp;ldquo;URL&amp;rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.&lt;/p>
&lt;h2 id="sharing-templates">Sharing Templates&lt;/h2>
&lt;p>If you&amp;rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn&amp;rsquo;t. That&amp;rsquo;s because we didn&amp;rsquo;t put the title in the home page&amp;rsquo;s template (layouts/index.html). That&amp;rsquo;s an easy thing to do, but let&amp;rsquo;s look at a different option.&lt;/p>
&lt;p>We can put the common bits into a shared template that&amp;rsquo;s stored in the themes/zafta/layouts/partials/ directory.&lt;/p>
&lt;h3 id="create-the-header-and-footer-partials">Create the Header and Footer Partials&lt;/h3>
&lt;p>In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme&amp;rsquo;s presentation.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/partials/header.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
:wq
$ vi themes/zafta/layouts/partials/footer.html
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;h3 id="update-the-home-page-template-to-use-the-partials">Update the Home Page Template to Use the Partials&lt;/h3>
&lt;p>The most noticeable difference between a template call and a partials call is the lack of path:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ template &amp;#34;theme/partials/header.html&amp;#34; . }}
&lt;/code>&lt;/pre>&lt;p>versus&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ partial &amp;#34;header.html&amp;#34; . }}
&lt;/code>&lt;/pre>&lt;p>Both pass in the context.&lt;/p>
&lt;p>Let&amp;rsquo;s change the home page template to use these new partials.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;#34;post&amp;#34;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if or (eq .Type &amp;#34;page&amp;#34;) (eq .Type &amp;#34;about&amp;#34;) }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The title on the home page is now &amp;ldquo;your title here&amp;rdquo;, which comes from the &amp;ldquo;title&amp;rdquo; variable in the config.toml file.&lt;/p>
&lt;h3 id="update-the-default-single-template-to-use-the-partials">Update the Default Single Template to Use the Partials&lt;/h3>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.&lt;/p>
&lt;h2 id="add-date-published-to-posts">Add “Date Published” to Posts&lt;/h2>
&lt;p>It&amp;rsquo;s common to have posts display the date that they were written or published, so let&amp;rsquo;s add that. The front matter of our posts has a variable named &amp;ldquo;date.&amp;rdquo; It&amp;rsquo;s usually the date the content was created, but let&amp;rsquo;s pretend that&amp;rsquo;s the value we want to display.&lt;/p>
&lt;h3 id="add-date-published-to-the-template">Add “Date Published” to the Template&lt;/h3>
&lt;p>We&amp;rsquo;ll start by updating the template used to render the posts. The template code will look like:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}
&lt;/code>&lt;/pre>&lt;p>Posts use the default single template, so we&amp;rsquo;ll change that file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The posts now have the date displayed in them. There&amp;rsquo;s a problem, though. The &amp;ldquo;about&amp;rdquo; page also has the date displayed.&lt;/p>
&lt;p>As usual, there are a couple of ways to make the date display only on posts. We could do an &amp;ldquo;if&amp;rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.&lt;/p>
&lt;p>The &amp;ldquo;if&amp;rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &amp;ldquo;code for today,&amp;rdquo; too.&lt;/p>
&lt;p>Let&amp;rsquo;s assume, though, that we&amp;rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&amp;rsquo;re going to create a section template.&lt;/p>
&lt;p>Let&amp;rsquo;s restore the default single template before we forget.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Now we&amp;rsquo;ll update the post&amp;rsquo;s version of the single template. If you remember Hugo&amp;rsquo;s rules, the template engine will use this version over the default.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/post/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn&amp;rsquo;t.&lt;/p>
&lt;h3 id="dont-repeat-yourself">Don&amp;rsquo;t Repeat Yourself&lt;/h3>
&lt;p>DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&amp;rsquo;re figuring that out, accept that you&amp;rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&amp;rsquo;s okay to delay splitting up a template.&lt;/p></description></item><item><title>This is a very long title This is a very long title This is a very long title This is a very long title This is a very long title</title><link>https://ytyeoh.github.io/tmc/post/this-is-a-very-long-title/</link><pubDate>Wed, 30 Aug 2017 15:43:48 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/post/this-is-a-very-long-title/</guid><description>&lt;p>This is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long titleThis is a very long title&lt;/p></description></item><item><title>Creating a New Theme</title><link>https://ytyeoh.github.io/tmc/post/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://ytyeoh.github.io/tmc/post/creating-a-new-theme/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.&lt;/p>
&lt;p>We&amp;rsquo;ll start with creating a new site with a very basic template. Then we&amp;rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.&lt;/p>
&lt;p>In this tutorial, commands that you enter will start with the &amp;ldquo;$&amp;rdquo; prompt. The output will follow. Lines that start with &amp;ldquo;#&amp;rdquo; are comments that I&amp;rsquo;ve added to explain a point. When I show updates to a file, the &amp;ldquo;:wq&amp;rdquo; on the last line means to save the file.&lt;/p>
&lt;p>Here&amp;rsquo;s an example:&lt;/p>
&lt;pre tabindex="0">&lt;code>## this is a comment
$ echo this is a command
this is a command
## edit the file
$vi foo.md
+++
date = &amp;#34;2014-09-28&amp;#34;
title = &amp;#34;creating a new theme&amp;#34;
+++
bah and humbug
:wq
## show it
$ cat foo.md
+++
date = &amp;#34;2014-09-28&amp;#34;
title = &amp;#34;creating a new theme&amp;#34;
+++
bah and humbug
$
&lt;/code>&lt;/pre>&lt;h2 id="some-definitions">Some Definitions&lt;/h2>
&lt;p>There are a few concepts that you need to understand before creating a theme.&lt;/p>
&lt;h3 id="skins">Skins&lt;/h3>
&lt;p>Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.&lt;/p>
&lt;p>You have two ways to create a skin. The simplest way is to create it in the &lt;code>layouts/&lt;/code> directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the &lt;code>layouts/&lt;/code> directory so it will always find the skin.&lt;/p>
&lt;p>Your second choice is to create it in a sub-directory of the &lt;code>themes/&lt;/code> directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?&lt;/p>
&lt;p>The difference between creating a skin in &lt;code>layouts/&lt;/code> and creating it in &lt;code>themes/&lt;/code> is very subtle. A skin in &lt;code>layouts/&lt;/code> can’t be customized without updating the templates and static files that it is built from. A skin created in &lt;code>themes/&lt;/code>, on the other hand, can be and that makes it easier for other people to use it.&lt;/p>
&lt;p>The rest of this tutorial will call a skin created in the &lt;code>themes/&lt;/code> directory a theme.&lt;/p>
&lt;p>Note that you can use this tutorial to create a skin in the &lt;code>layouts/&lt;/code> directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.&lt;/p>
&lt;h3 id="the-home-page">The Home Page&lt;/h3>
&lt;p>The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.&lt;/p>
&lt;h3 id="site-configuration-file">Site Configuration File&lt;/h3>
&lt;p>When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.&lt;/p>
&lt;p>Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your &lt;code>content/&lt;/code> directory and template files in your &lt;code>themes/&lt;/code> directory. It will create HTML files in your &lt;code>public/&lt;/code> directory. You can change this by specifying alternate locations in the configuration file.&lt;/p>
&lt;h3 id="content">Content&lt;/h3>
&lt;p>Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.&lt;/p>
&lt;h4 id="front-matter">Front Matter&lt;/h4>
&lt;p>The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “&lt;code>+++&lt;/code>”, YAML by “&lt;code>---&lt;/code>”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.&lt;/p>
&lt;p>The information in the front matter is passed into the template before the content is rendered into HTML.&lt;/p>
&lt;h4 id="markdown">Markdown&lt;/h4>
&lt;p>Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.&lt;/p>
&lt;h3 id="template-files">Template Files&lt;/h3>
&lt;p>Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&amp;rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.&lt;/p>
&lt;p>There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.&lt;/p>
&lt;p>Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.&lt;/p>
&lt;p>Please note that you can use the front matter to influence Hugo’s choice of templates.&lt;/p>
&lt;h4 id="single-template">Single Template&lt;/h4>
&lt;p>A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.&lt;/p>
&lt;h4 id="list-template">List Template&lt;/h4>
&lt;p>A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.&lt;/p>
&lt;p>The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.&lt;/p>
&lt;h4 id="partial-template">Partial Template&lt;/h4>
&lt;p>A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.&lt;/p>
&lt;h2 id="create-a-new-site">Create a New Site&lt;/h2>
&lt;p>Let&amp;rsquo;s use Hugo to create a new web site. I&amp;rsquo;m a Mac user, so I&amp;rsquo;ll create mine in my home directory, in the Sites folder. If you&amp;rsquo;re using Linux, you might have to create the folder first.&lt;/p>
&lt;p>The &amp;ldquo;new site&amp;rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .
drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;p>Take a look in the content/ directory to confirm that it is empty.&lt;/p>
&lt;p>The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&amp;rsquo;s a topic for a different tutorial, so please ignore them for now.&lt;/p>
&lt;h3 id="generate-the-html-for-the-new-site">Generate the HTML For the New Site&lt;/h3>
&lt;p>Running the &lt;code>hugo&lt;/code> command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&amp;rsquo;s everything that&amp;rsquo;s not content). Since we have an empty site, it won&amp;rsquo;t do much, but it will do it very quickly.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;p>The &amp;ldquo;&lt;code>--verbose&lt;/code>&amp;rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &amp;ldquo;INFO:&amp;rdquo; or &amp;ldquo;WARN:&amp;rdquo; is present because we used that flag. The lines that start with &amp;ldquo;WARN:&amp;rdquo; are warning messages. We&amp;rsquo;ll go over them later.&lt;/p>
&lt;p>We can verify that the command worked by looking at the directory again.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;p>See that new public/ directory? Hugo placed all generated content there. When you&amp;rsquo;re ready to publish your web site, that&amp;rsquo;s the place to start. For now, though, let&amp;rsquo;s just confirm that we have what we&amp;rsquo;d expect from a site with no content.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l public
total 16
-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml
-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;p>Hugo created two XML files, which is standard, but there are no HTML files.&lt;/p>
&lt;h3 id="test-the-new-site">Test the New Site&lt;/h3>
&lt;p>Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &amp;ldquo;server&amp;rdquo; command. If it is successful, you will see output similar to the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code>&lt;/pre>&lt;p>Connect to the listed URL (it&amp;rsquo;s on the line that starts with &amp;ldquo;Web Server&amp;rdquo;). If everything is working correctly, you should get a page that shows the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>index.xml
sitemap.xml
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s a listing of your public/ directory. Hugo didn&amp;rsquo;t create a home page because our site has no content. When there&amp;rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.&lt;/p>
&lt;p>Let’s go back and look at those warnings again.&lt;/p>
&lt;pre tabindex="0">&lt;code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
&lt;/code>&lt;/pre>&lt;p>That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.&lt;/p>
&lt;p>Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.&lt;/p>
&lt;p>I like that the verbose flag causes Hugo to list the files that it&amp;rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&amp;rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&amp;rsquo;t find a template for the home page and it told you so.&lt;/p>
&lt;p>At this point, you&amp;rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.&lt;/p>
&lt;h2 id="create-a-new-theme">Create a New Theme&lt;/h2>
&lt;p>Hugo doesn&amp;rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.&lt;/p>
&lt;p>We&amp;rsquo;re going to create a new theme called &amp;ldquo;zafta.&amp;rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.&lt;/p>
&lt;p>All themes have opinions on content and layout. For example, Zafta uses &amp;ldquo;post&amp;rdquo; over &amp;ldquo;blog&amp;rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.&lt;/p>
&lt;h3 id="create-a-skeleton">Create a Skeleton&lt;/h3>
&lt;p>Use the hugo &amp;ldquo;new&amp;rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo new theme zafta
$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes
$ find themes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml
$
&lt;/code>&lt;/pre>&lt;p>The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.&lt;/p>
&lt;p>Please take a minute to fill out the theme.toml and LICENSE.md files. They&amp;rsquo;re optional, but if you&amp;rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&amp;rsquo;s also nice to declare the license so that people will know how they can use the theme.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/theme.toml
author = &amp;#34;michael d henderson&amp;#34;
description = &amp;#34;a minimal working template&amp;#34;
license = &amp;#34;MIT&amp;#34;
name = &amp;#34;zafta&amp;#34;
source_repo = &amp;#34;&amp;#34;
tags = [&amp;#34;tags&amp;#34;, &amp;#34;categories&amp;#34;]
:wq
## also edit themes/zafta/LICENSE.md and change
## the bit that says &amp;#34;YOUR_NAME_HERE&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Note that the the skeleton&amp;rsquo;s template files are empty. Don&amp;rsquo;t worry, we&amp;rsquo;ll be changing that shortly.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
&lt;/code>&lt;/pre>&lt;h3 id="update-the-configuration-file-to-use-the-theme">Update the Configuration File to Use the Theme&lt;/h3>
&lt;p>Now that we&amp;rsquo;ve got a theme to work with, it&amp;rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &amp;ldquo;-t zafta&amp;rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&amp;rsquo;t put it in the configuration file or specify it on the command line, you won&amp;rsquo;t use the template that you&amp;rsquo;re expecting to.&lt;/p>
&lt;p>Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi config.toml
theme = &amp;#34;zafta&amp;#34;
baseurl = &amp;#34;&amp;#34;
languageCode = &amp;#34;en-us&amp;#34;
title = &amp;#34;zafta - totally refreshing&amp;#34;
MetaDataFormat = &amp;#34;toml&amp;#34;
:wq
$
&lt;/code>&lt;/pre>&lt;h3 id="generate-the-site">Generate the Site&lt;/h3>
&lt;p>Now that we have an empty theme, let&amp;rsquo;s generate the site again.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;p>Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&amp;rsquo;s directory.&lt;/p>
&lt;p>Let&amp;rsquo;s check the public/ directory to see what Hugo&amp;rsquo;s created.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l public
total 16
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css
-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html
-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js
-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;p>Notice four things:&lt;/p>
&lt;ol>
&lt;li>Hugo created a home page. This is the file public/index.html.&lt;/li>
&lt;li>Hugo created a css/ directory.&lt;/li>
&lt;li>Hugo created a js/ directory.&lt;/li>
&lt;li>Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&amp;rsquo;t create any pages. That&amp;rsquo;s because it considers a &amp;ldquo;page&amp;rdquo; to be a file created directly from a content file. It doesn&amp;rsquo;t count things like the index.html files that it creates automatically.&lt;/li>
&lt;/ol>
&lt;h4 id="the-home-page-1">The Home Page&lt;/h4>
&lt;p>Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&amp;rsquo;s warning message shows that it looks for three different templates:&lt;/p>
&lt;pre tabindex="0">&lt;code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
&lt;/code>&lt;/pre>&lt;p>If it can&amp;rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.&lt;/p>
&lt;p>When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find . -name index.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$
&lt;/code>&lt;/pre>&lt;h4 id="the-magic-of-static">The Magic of Static&lt;/h4>
&lt;p>Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.&lt;/p>
&lt;p>Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&amp;rsquo;s opinion is that you&amp;rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&amp;rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo&amp;rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js
$
&lt;/code>&lt;/pre>&lt;h2 id="the-theme-development-cycle">The Theme Development Cycle&lt;/h2>
&lt;p>When you&amp;rsquo;re working on a theme, you will make changes in the theme&amp;rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:&lt;/p>
&lt;ol>
&lt;li>Purge the public/ directory.&lt;/li>
&lt;li>Run the built in web server in watch mode.&lt;/li>
&lt;li>Open your site in a browser.&lt;/li>
&lt;li>Update the theme.&lt;/li>
&lt;li>Glance at your browser window to see changes.&lt;/li>
&lt;li>Return to step 4.&lt;/li>
&lt;/ol>
&lt;p>I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.&lt;/p>
&lt;p>Check the main Hugo site for information on using Git with Hugo.&lt;/p>
&lt;h3 id="purge-the-public-directory">Purge the public/ Directory&lt;/h3>
&lt;p>When generating the site, Hugo will create new files and update existing ones in the &lt;code>public/&lt;/code> directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.&lt;/p>
&lt;p>Note: If you&amp;rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.&lt;/p>
&lt;h3 id="hugos-watch-option">Hugo&amp;rsquo;s Watch Option&lt;/h3>
&lt;p>Hugo&amp;rsquo;s &amp;ldquo;&lt;code>--watch&lt;/code>&amp;rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.&lt;/p>
&lt;h3 id="live-reload">Live Reload&lt;/h3>
&lt;p>Hugo&amp;rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &amp;ldquo;Wow, that&amp;rsquo;s totally amazing.&amp;rdquo;&lt;/p>
&lt;h3 id="development-commands">Development Commands&lt;/h3>
&lt;p>Use the following commands as the basis for your workflow.&lt;/p>
&lt;pre tabindex="0">&lt;code>## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
&lt;/code>&lt;/pre>&lt;p>Here&amp;rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&amp;rsquo;ve said this before, it&amp;rsquo;s amazing.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&amp;#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&amp;#34;: MODIFY|ATTRIB]
Change detected, rebuilding site
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 1 ms
&lt;/code>&lt;/pre>&lt;h2 id="update-the-home-page-template">Update the Home Page Template&lt;/h2>
&lt;p>The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&amp;rsquo;s layout/ directory:&lt;/p>
&lt;ol>
&lt;li>index.html&lt;/li>
&lt;li>_default/list.html&lt;/li>
&lt;li>_default/single.html&lt;/li>
&lt;/ol>
&lt;p>We could update one of the default templates, but a good design decision is to update the most specific template available. That&amp;rsquo;s not a hard and fast rule (in fact, we&amp;rsquo;ll break it a few times in this tutorial), but it is a good generalization.&lt;/p>
&lt;h3 id="make-a-static-home-page">Make a Static Home Page&lt;/h3>
&lt;p>Right now, that page is empty because we don&amp;rsquo;t have any content and we don&amp;rsquo;t have any logic in the template. Let&amp;rsquo;s change that by adding some text to the template.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="live-reload-1">Live Reload&lt;/h4>
&lt;p>Note: If you&amp;rsquo;re running the server with the &lt;code>--watch&lt;/code> option, you&amp;rsquo;ll see different content in the file:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;script src=&amp;#34;http://&amp;#39;
+ (location.host || &amp;#39;localhost&amp;#39;).split(&amp;#39;:&amp;#39;)[0]
+ &amp;#39;:1313/livereload.js?mindelay=10&amp;#34;&amp;gt;&amp;lt;/&amp;#39;
+ &amp;#39;script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>When you use &lt;code>--watch&lt;/code>, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.&lt;/p>
&lt;h3 id="build-a-dynamic-home-page">Build a &amp;ldquo;Dynamic&amp;rdquo; Home Page&lt;/h3>
&lt;p>&amp;ldquo;Dynamic home page?&amp;rdquo; Hugo&amp;rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&amp;rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&amp;rsquo;ll use iteration in the template to do that.&lt;/p>
&lt;h4 id="create-new-posts">Create New Posts&lt;/h4>
&lt;p>Now that we have the home page generating static content, let&amp;rsquo;s add some content to the site. We&amp;rsquo;ll display these posts as a list on the home page and on their own page, too.&lt;/p>
&lt;p>Hugo has a command to generate a skeleton post, just like it does for sites and themes.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &amp;lt;nil&amp;gt; to map[string]interface{}
$
&lt;/code>&lt;/pre>&lt;p>That wasn&amp;rsquo;t very nice, was it?&lt;/p>
&lt;p>The &amp;ldquo;new&amp;rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there&amp;rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/archetypes/post.md
+++
Description = &amp;#34;&amp;#34;
Tags = []
Categories = []
+++
:wq
$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md
$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created
$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created
$ ls -l content/post
total 16
-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md
-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md
$ cat content/post/first.md
+++
Categories = []
Description = &amp;#34;&amp;#34;
Tags = []
date = &amp;#34;2014-09-29T21:54:53-05:00&amp;#34;
title = &amp;#34;first&amp;#34;
+++
my first post
$ cat content/post/second.md
+++
Categories = []
Description = &amp;#34;&amp;#34;
Tags = []
date = &amp;#34;2014-09-29T21:57:09-05:00&amp;#34;
title = &amp;#34;second&amp;#34;
+++
my second post
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;, &amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$
&lt;/code>&lt;/pre>&lt;p>The output says that it created 2 pages. Those are our new posts:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html
$
&lt;/code>&lt;/pre>&lt;p>The new files are empty because because the templates used to generate the content are empty. The homepage doesn&amp;rsquo;t show the new content, either. We have to update the templates to add the posts.&lt;/p>
&lt;h3 id="list-and-single-templates">List and Single Templates&lt;/h3>
&lt;p>In Hugo, we have three major kinds of templates. There&amp;rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &amp;ldquo;single&amp;rdquo; templates which are used to generate output for a single content file. We also have &amp;ldquo;list&amp;rdquo; templates that are used to group multiple pieces of content before generating output.&lt;/p>
&lt;p>Generally speaking, list templates are named &amp;ldquo;list.html&amp;rdquo; and single templates are named &amp;ldquo;single.html.&amp;rdquo;&lt;/p>
&lt;p>There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.&lt;/p>
&lt;h3 id="add-content-to-the-homepage">Add Content to the Homepage&lt;/h3>
&lt;p>The home page will contain a list of posts. Let&amp;rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &amp;ldquo;{{&amp;rdquo; and &amp;ldquo;}}&amp;rdquo;. In our template, the commands are:&lt;/p>
&lt;ol>
&lt;li>range&lt;/li>
&lt;li>.Title&lt;/li>
&lt;li>end&lt;/li>
&lt;/ol>
&lt;p>The &amp;ldquo;range&amp;rdquo; command is an iterator. We&amp;rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.&lt;/p>
&lt;p>The &amp;ldquo;.Title&amp;rdquo; command prints the value of the &amp;ldquo;title&amp;rdquo; variable. Hugo pulls it from the front matter in the Markdown file.&lt;/p>
&lt;p>The &amp;ldquo;end&amp;rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &amp;ldquo;end.&amp;rdquo; Everything between the &amp;ldquo;range&amp;rdquo; and &amp;ldquo;end&amp;rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.&lt;/p>
&lt;p>It&amp;rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.&lt;/p>
&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;p>Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let&amp;rsquo;s take a moment to appreciate what we&amp;rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&amp;rsquo;ve learned everything you need to know to build a theme. All that&amp;rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.&lt;/p>
&lt;p>And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&amp;rsquo;t worry, though, that&amp;rsquo;s all to come.&lt;/p>
&lt;h3 id="add-content-to-the-posts">Add Content to the Posts&lt;/h3>
&lt;p>We&amp;rsquo;re working with posts, which are in the content/post/ directory. That means that their section is &amp;ldquo;post&amp;rdquo; (and if we don&amp;rsquo;t do something weird, their type is also &amp;ldquo;post&amp;rdquo;).&lt;/p>
&lt;p>Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can&amp;rsquo;t find one, then it will look in the _default/ directory. There are some twists that we&amp;rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.&lt;/p>
&lt;p>Now that we know the search rule, let&amp;rsquo;s see what we actually have available:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
&lt;/code>&lt;/pre>&lt;p>We could create a new template, post/single.html, or change the default. Since we don&amp;rsquo;t know of any other content types, let&amp;rsquo;s start with updating the default.&lt;/p>
&lt;p>Remember, any content that we haven&amp;rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&amp;rsquo;re going to be adding different types of content and we&amp;rsquo;re going to end up undoing some of the changes we&amp;rsquo;ve made. It&amp;rsquo;s good because we&amp;rsquo;ll be able to see immediate results. It&amp;rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&amp;rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&amp;rsquo;ll accept the cost and proceed.&lt;/p>
&lt;p>Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&amp;rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&amp;rsquo;s a refreshing amount of joy right there.&lt;/p>
&lt;h4 id="update-the-template-file">Update the Template File&lt;/h4>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html
$ cat public/post/first/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;first&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;my first post&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$ cat public/post/second/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;second&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;my second post&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;p>Notice that the posts now have content. You can go to localhost:1313/post/first to verify.&lt;/p>
&lt;h3 id="linking-to-content">Linking to Content&lt;/h3>
&lt;p>The posts are on the home page. Let&amp;rsquo;s add a link from there to the post. Since this is the home page, we&amp;rsquo;ll update its template.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Build the web site and verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;#34;tag&amp;#34;:&amp;#34;tags&amp;#34;, &amp;#34;category&amp;#34;:&amp;#34;categories&amp;#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;/post/second/&amp;#34;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;/post/first/&amp;#34;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;h3 id="create-a-post-listing">Create a Post Listing&lt;/h3>
&lt;p>We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let&amp;rsquo;s make it show a list of all posts (not just the first ten).&lt;/p>
&lt;p>We need to decide which template to update. This will be a listing, so it should be a list template. Let&amp;rsquo;s take a quick look and see which list templates are available.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
&lt;/code>&lt;/pre>&lt;p>As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don&amp;rsquo;t have multiple content types, so let&amp;rsquo;s stay consistent and update the default list template.&lt;/p>
&lt;h2 id="creating-top-level-pages">Creating Top Level Pages&lt;/h2>
&lt;p>Let&amp;rsquo;s add an &amp;ldquo;about&amp;rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).&lt;/p>
&lt;p>The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let&amp;rsquo;s verify that by creating an &amp;ldquo;about&amp;rdquo; page at the top level:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi content/about.md
+++
title = &amp;#34;about&amp;#34;
description = &amp;#34;about this site&amp;#34;
date = &amp;#34;2014-09-27&amp;#34;
slug = &amp;#34;about time&amp;#34;
+++
## about us
i&amp;#39;m speechless
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html
&lt;/code>&lt;/pre>&lt;p>Notice that the page wasn&amp;rsquo;t created at the top level. It was created in a sub-directory named &amp;lsquo;about-time/&amp;rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It&amp;rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.&lt;/p>
&lt;p>One other thing. Take a look at the home page.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/theme/&amp;#34;&amp;gt;creating a new theme&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/about-time/&amp;#34;&amp;gt;about&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/second-post/&amp;#34;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;#34;http://localhost:1313/post/first-post/&amp;#34;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;script src=&amp;#34;http://&amp;#39;
+ (location.host || &amp;#39;localhost&amp;#39;).split(&amp;#39;:&amp;#39;)[0]
+ &amp;#39;:1313/livereload.js?mindelay=10&amp;#34;&amp;gt;&amp;lt;/&amp;#39;
+ &amp;#39;script&amp;gt;&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Notice that the &amp;ldquo;about&amp;rdquo; link is listed with the posts? That&amp;rsquo;s not desirable, so let&amp;rsquo;s change that first.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;#34;post&amp;#34;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if eq .Type &amp;#34;page&amp;#34; }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.&lt;/p>
&lt;p>But, that about page still renders to about-time/index.html.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find public -name &amp;#39;*.html&amp;#39; | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html
&lt;/code>&lt;/pre>&lt;p>Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let&amp;rsquo;s do it the hard way and change the permalink in the configuration file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi config.toml
[permalinks]
page = &amp;#34;/:title/&amp;#34;
about = &amp;#34;/:filename/&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify that this didn&amp;rsquo;t work. Hugo lets &amp;ldquo;slug&amp;rdquo; or &amp;ldquo;URL&amp;rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.&lt;/p>
&lt;h2 id="sharing-templates">Sharing Templates&lt;/h2>
&lt;p>If you&amp;rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn&amp;rsquo;t. That&amp;rsquo;s because we didn&amp;rsquo;t put the title in the home page&amp;rsquo;s template (layouts/index.html). That&amp;rsquo;s an easy thing to do, but let&amp;rsquo;s look at a different option.&lt;/p>
&lt;p>We can put the common bits into a shared template that&amp;rsquo;s stored in the themes/zafta/layouts/partials/ directory.&lt;/p>
&lt;h3 id="create-the-header-and-footer-partials">Create the Header and Footer Partials&lt;/h3>
&lt;p>In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme&amp;rsquo;s presentation.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/partials/header.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
:wq
$ vi themes/zafta/layouts/partials/footer.html
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;h3 id="update-the-home-page-template-to-use-the-partials">Update the Home Page Template to Use the Partials&lt;/h3>
&lt;p>The most noticeable difference between a template call and a partials call is the lack of path:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ template &amp;#34;theme/partials/header.html&amp;#34; . }}
&lt;/code>&lt;/pre>&lt;p>versus&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ partial &amp;#34;header.html&amp;#34; . }}
&lt;/code>&lt;/pre>&lt;p>Both pass in the context.&lt;/p>
&lt;p>Let&amp;rsquo;s change the home page template to use these new partials.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/index.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;#34;post&amp;#34;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if or (eq .Type &amp;#34;page&amp;#34;) (eq .Type &amp;#34;about&amp;#34;) }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .Permalink }}&amp;#34;&amp;gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The title on the home page is now &amp;ldquo;your title here&amp;rdquo;, which comes from the &amp;ldquo;title&amp;rdquo; variable in the config.toml file.&lt;/p>
&lt;h3 id="update-the-default-single-template-to-use-the-partials">Update the Default Single Template to Use the Partials&lt;/h3>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.&lt;/p>
&lt;h2 id="add-date-published-to-posts">Add “Date Published” to Posts&lt;/h2>
&lt;p>It&amp;rsquo;s common to have posts display the date that they were written or published, so let&amp;rsquo;s add that. The front matter of our posts has a variable named &amp;ldquo;date.&amp;rdquo; It&amp;rsquo;s usually the date the content was created, but let&amp;rsquo;s pretend that&amp;rsquo;s the value we want to display.&lt;/p>
&lt;h3 id="add-date-published-to-the-template">Add “Date Published” to the Template&lt;/h3>
&lt;p>We&amp;rsquo;ll start by updating the template used to render the posts. The template code will look like:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}
&lt;/code>&lt;/pre>&lt;p>Posts use the default single template, so we&amp;rsquo;ll change that file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The posts now have the date displayed in them. There&amp;rsquo;s a problem, though. The &amp;ldquo;about&amp;rdquo; page also has the date displayed.&lt;/p>
&lt;p>As usual, there are a couple of ways to make the date display only on posts. We could do an &amp;ldquo;if&amp;rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.&lt;/p>
&lt;p>The &amp;ldquo;if&amp;rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &amp;ldquo;code for today,&amp;rdquo; too.&lt;/p>
&lt;p>Let&amp;rsquo;s assume, though, that we&amp;rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&amp;rsquo;re going to create a section template.&lt;/p>
&lt;p>Let&amp;rsquo;s restore the default single template before we forget.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Now we&amp;rsquo;ll update the post&amp;rsquo;s version of the single template. If you remember Hugo&amp;rsquo;s rules, the template engine will use this version over the default.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ vi themes/zafta/layouts/post/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;#34;footer.html&amp;#34; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn&amp;rsquo;t.&lt;/p>
&lt;h3 id="dont-repeat-yourself">Don&amp;rsquo;t Repeat Yourself&lt;/h3>
&lt;p>DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&amp;rsquo;re figuring that out, accept that you&amp;rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&amp;rsquo;s okay to delay splitting up a template.&lt;/p></description></item><item><title>(Hu)go Template Primer</title><link>https://ytyeoh.github.io/tmc/post/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://ytyeoh.github.io/tmc/post/goisforlovers/</guid><description>&lt;p>Hugo uses the excellent &lt;a href="http://golang.org/">go&lt;/a> &lt;a href="http://golang.org/pkg/html/template/">html/template&lt;/a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p>
&lt;p>This document is a brief primer on using go templates. The &lt;a href="http://golang.org/pkg/html/template/">go docs&lt;/a>
provide more details.&lt;/p>
&lt;h2 id="introduction-to-go-templates">Introduction to Go Templates&lt;/h2>
&lt;p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that go templates parse very quickly.&lt;/p>
&lt;p>A unique characteristic of go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href="http://golang.org/pkg/html/template/">go docs&lt;/a>.&lt;/p>
&lt;h2 id="basic-syntax">Basic Syntax&lt;/h2>
&lt;p>Go lang templates are html files with the addition of variables and
functions.&lt;/p>
&lt;p>&lt;strong>Go variables and functions are accessible within {{ }}&lt;/strong>&lt;/p>
&lt;p>Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p>
&lt;pre>&lt;code>{{ foo }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Parameters are separated using spaces&lt;/strong>&lt;/p>
&lt;p>Calling the add function with input of 1, 2:&lt;/p>
&lt;pre>&lt;code>{{ add 1 2 }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Methods and fields are accessed via dot notation&lt;/strong>&lt;/p>
&lt;p>Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>{{ .Params.bar }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Parentheses can be used to group items together&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="variables">Variables&lt;/h2>
&lt;p>Each go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href="https://ytyeoh.github.io/tmc/layout/variables">variables&lt;/a> page.&lt;/p>
&lt;p>A variable is accessed by referencing the variable name.&lt;/p>
&lt;pre>&lt;code>&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>Variables can also be defined and referenced.&lt;/p>
&lt;pre>&lt;code>{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code>&lt;/pre>
&lt;h2 id="functions">Functions&lt;/h2>
&lt;p>Go template ship with a few functions which provide basic functionality. The go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href="https://ytyeoh.github.io/tmc/layout/functions">Hugo template
functions&lt;/a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ add 1 2 }}
&lt;/code>&lt;/pre>
&lt;h2 id="includes">Includes&lt;/h2>
&lt;p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code>&lt;/pre>
&lt;h2 id="logic">Logic&lt;/h2>
&lt;p>Go templates provide the most basic iteration and conditional logic.&lt;/p>
&lt;h3 id="iteration">Iteration&lt;/h3>
&lt;p>Just like in go, the go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p>
&lt;p>&lt;strong>Example 1: Using Context&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ range array }}
{{ . }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: Declaring value variable name&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{range $element := array}}
{{ $element }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: Declaring key and value variable name&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{range $index, $element := array}}
{{ $index }}
{{ $element }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;h3 id="conditionals">Conditionals&lt;/h3>
&lt;p>If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code>end&lt;/code>.&lt;/p>
&lt;p>Go Templates treat the following values as false:&lt;/p>
&lt;ul>
&lt;li>false&lt;/li>
&lt;li>0&lt;/li>
&lt;li>any array, slice, map, or string of length zero&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example 1: If&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: If -&amp;gt; Else&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;alt&amp;quot; }}
{{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
{{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 3: And &amp;amp; Or&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 4: With&lt;/strong>&lt;/p>
&lt;p>An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code>.&lt;/code> within its scope,
and skips the block if the variable is absent.&lt;/p>
&lt;p>The first example above could be simplified as:&lt;/p>
&lt;pre>&lt;code>{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 5: If -&amp;gt; Else If&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;alt&amp;quot; }}
{{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
{{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="pipes">Pipes&lt;/h2>
&lt;p>One of the most powerful components of go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p>
&lt;p>Because of the very simple syntax of go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p>
&lt;p>A few simple examples should help convey how to use the pipe.&lt;/p>
&lt;p>&lt;strong>Example 1 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if eq 1 1 }} Same {{ end }}
&lt;/code>&lt;/pre>
&lt;p>is the same as&lt;/p>
&lt;pre>&lt;code>{{ eq 1 1 | if }} Same {{ end }}
&lt;/code>&lt;/pre>
&lt;p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p>
&lt;p>&lt;strong>Example 2 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code>&lt;/pre>
&lt;p>Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p>
&lt;p>&lt;strong>Example 3 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>Could be rewritten as&lt;/p>
&lt;pre>&lt;code>{{ isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="context-aka-the-dot">Context (aka. the dot)&lt;/h2>
&lt;p>The most easily overlooked concept to understand about go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code> {{ $title := .Site.Title }}
{{ range .Params.tags }}
&amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p>
&lt;h1 id="hugo-parameters">Hugo Parameters&lt;/h1>
&lt;p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p>
&lt;h2 id="using-content-page-parameters">Using Content (page) Parameters&lt;/h2>
&lt;p>In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href="https://ytyeoh.github.io/tmc/content/front-matter">front matter&lt;/a>.&lt;/p>
&lt;p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p>
&lt;p>Here is the example front matter:&lt;/p>
&lt;pre tabindex="0">&lt;code>---
title: &amp;#34;Permalinks&amp;#34;
date: &amp;#34;2013-11-18&amp;#34;
aliases:
- &amp;#34;/doc/permalinks/&amp;#34;
groups: [&amp;#34;extras&amp;#34;]
groups_weight: 30
notoc: true
---
&lt;/code>&lt;/pre>&lt;p>Here is the corresponding code inside of the template:&lt;/p>
&lt;pre>&lt;code> {{ if not .Params.notoc }}
&amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
{{ .TableOfContents }}
&amp;lt;/div&amp;gt;
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="using-site-config-parameters">Using Site (config) Parameters&lt;/h2>
&lt;p>In your top-level configuration file (eg, &lt;code>config.yaml&lt;/code>) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p>
&lt;p>For instance, you might declare:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-4">4&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#062873;font-weight:bold">params&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#062873;font-weight:bold">CopyrightHTML&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#4070a0">&amp;#34;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#062873;font-weight:bold">TwitterUser&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#4070a0">&amp;#34;spf13&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#062873;font-weight:bold">SidebarRecentLimit&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#40a070">5&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Within a footer layout, you might then declare a &lt;code>&amp;lt;footer&amp;gt;&lt;/code> which is only
provided if the &lt;code>CopyrightHTML&lt;/code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again. This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p>
&lt;pre tabindex="0">&lt;code>{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;#34;text-center&amp;#34;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code>&lt;/pre>&lt;p>An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code>.&lt;/code> within its scope,
and skips the block if the variable is absent:&lt;/p>
&lt;pre tabindex="0">&lt;code>{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;#34;twitter&amp;#34;&amp;gt;
&amp;lt;a href=&amp;#34;https://twitter.com/{{.}}&amp;#34; rel=&amp;#34;author&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;/images/twitter.png&amp;#34; width=&amp;#34;48&amp;#34; height=&amp;#34;48&amp;#34; title=&amp;#34;Twitter: {{.}}&amp;#34;
alt=&amp;#34;Twitter&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code>&lt;/pre>&lt;p>Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;nav class=&amp;#34;recent&amp;#34;&amp;gt;
&amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;{{.RelPermalink}}&amp;#34;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
{{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>Getting Started with Hugo</title><link>https://ytyeoh.github.io/tmc/post/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://ytyeoh.github.io/tmc/post/hugoisforlovers/</guid><description>&lt;h2 id="step-1-install-hugo">Step 1. Install Hugo&lt;/h2>
&lt;p>Goto &lt;a href="https://github.com/spf13/hugo/releases">hugo releases&lt;/a> and download the
appropriate version for your os and architecture.&lt;/p>
&lt;p>Save it somewhere specific as we will be using it in the next step.&lt;/p>
&lt;p>More complete instructions are available at &lt;a href="https://ytyeoh.github.io/tmc/overview/installing/">installing hugo&lt;/a>&lt;/p>
&lt;h2 id="step-2-build-the-docs">Step 2. Build the Docs&lt;/h2>
&lt;p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p>
&lt;p>Follow the following steps:&lt;/p>
&lt;ol>
&lt;li>Clone the &lt;a href="http://github.com/spf13/hugo">hugo repository&lt;/a>&lt;/li>
&lt;li>Go into the repo&lt;/li>
&lt;li>Run hugo in server mode and build the docs&lt;/li>
&lt;li>Open your browser to http://localhost:1313&lt;/li>
&lt;/ol>
&lt;p>Corresponding pseudo commands:&lt;/p>
&lt;pre>&lt;code>git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Press ctrl+c to stop
&lt;/code>&lt;/pre>
&lt;p>Once you&amp;rsquo;ve gotten here, follow along the rest of this page on your local build.&lt;/p>
&lt;h2 id="step-3-change-the-docs-site">Step 3. Change the docs site&lt;/h2>
&lt;p>Stop the Hugo process by hitting ctrl+c.&lt;/p>
&lt;p>Now we are going to run hugo again, but this time with hugo in watch mode.&lt;/p>
&lt;pre>&lt;code>/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&amp;gt; Press ctrl+c to stop
&lt;/code>&lt;/pre>
&lt;p>Open your &lt;a href="http://vim.spf13.com">favorite editor&lt;/a> and change one of the source
content pages. How about changing this very file to &lt;em>fix the typo&lt;/em>. How about changing this very file to &lt;em>fix the typo&lt;/em>.&lt;/p>
&lt;p>Content files are found in &lt;code>docs/content/&lt;/code>. Unless otherwise specified, files
are located at the same relative location as the url, in our case
&lt;code>docs/content/overview/quickstart.md&lt;/code>.&lt;/p>
&lt;p>Change and save this file.. Notice what happened in your terminal.&lt;/p>
&lt;pre>&lt;code>&amp;gt; Change detected, rebuilding site
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 26 ms
&lt;/code>&lt;/pre>
&lt;p>Refresh the browser and observe that the typo is now fixed.&lt;/p>
&lt;p>Notice how quick that was. Try to refresh the site before it&amp;rsquo;s finished building.. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.&lt;/p>
&lt;h2 id="step-4-have-fun">Step 4. Have fun&lt;/h2>
&lt;p>The best way to learn something is to play with it.&lt;/p></description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://ytyeoh.github.io/tmc/post/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://ytyeoh.github.io/tmc/post/migrate-from-jekyll/</guid><description>&lt;h2 id="move-static-content-to-static">Move static content to &lt;code>static&lt;/code>&lt;/h2>
&lt;p>Jekyll has a rule that any directory not starting with &lt;code>_&lt;/code> will be copied as-is to the &lt;code>_site&lt;/code> output. Hugo keeps all static content under &lt;code>static&lt;/code>. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p>
&lt;pre>&lt;code>▾ &amp;lt;root&amp;gt;/
▾ images/
logo.png
&lt;/code>&lt;/pre>
&lt;p>should become&lt;/p>
&lt;pre>&lt;code>▾ &amp;lt;root&amp;gt;/
▾ static/
▾ images/
logo.png
&lt;/code>&lt;/pre>
&lt;p>Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code>CNAME&lt;/code>) to be moved to &lt;code>static&lt;/code>.&lt;/p>
&lt;h2 id="create-your-hugo-configuration-file">Create your Hugo configuration file&lt;/h2>
&lt;p>Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href="https://ytyeoh.github.io/tmc/overview/configuration/">Hugo configuration documentation&lt;/a> for details.&lt;/p>
&lt;h2 id="set-your-configuration-publish-folder-to-_site">Set your configuration publish folder to &lt;code>_site&lt;/code>&lt;/h2>
&lt;p>The default is for Jekyll to publish to &lt;code>_site&lt;/code> and for Hugo to publish to &lt;code>public&lt;/code>. If, like me, you have &lt;a href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html">&lt;code>_site&lt;/code> mapped to a git submodule on the &lt;code>gh-pages&lt;/code> branch&lt;/a>, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Change your submodule to point to map &lt;code>gh-pages&lt;/code> to public instead of &lt;code>_site&lt;/code> (recommended).&lt;/p>
&lt;pre>&lt;code> git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Or, change the Hugo configuration to use &lt;code>_site&lt;/code> instead of &lt;code>public&lt;/code>.&lt;/p>
&lt;pre>&lt;code> {
..
&amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
..
}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h2 id="convert-jekyll-templates-to-hugo-templates">Convert Jekyll templates to Hugo templates&lt;/h2>
&lt;p>That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href="http://jekyllrb.com/docs/templates/">Jekyll&amp;rsquo;s template documentation&lt;/a> if you need to refresh your memory on how you built your blog and &lt;a href="https://ytyeoh.github.io/tmc/layout/templates/">Hugo&amp;rsquo;s template&lt;/a> to learn Hugo&amp;rsquo;s way.&lt;/p>
&lt;p>As a single reference data point, converting my templates for &lt;a href="http://heyitsalex.net/">heyitsalex.net&lt;/a> took me no more than a few hours.&lt;/p>
&lt;h2 id="convert-jekyll-plugins-to-hugo-shortcodes">Convert Jekyll plugins to Hugo shortcodes&lt;/h2>
&lt;p>Jekyll has &lt;a href="http://jekyllrb.com/docs/plugins/">plugins&lt;/a>; Hugo has &lt;a href="https://ytyeoh.github.io/tmc/doc/shortcodes/">shortcodes&lt;/a>. It&amp;rsquo;s fairly trivial to do a port.&lt;/p>
&lt;h3 id="implementation">Implementation&lt;/h3>
&lt;p>As an example, I was using a custom &lt;a href="https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb">&lt;code>image_tag&lt;/code>&lt;/a> plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p>
&lt;p>Jekyll&amp;rsquo;s plugin:&lt;/p>
&lt;pre>&lt;code>module Jekyll
class ImageTag &amp;lt; Liquid::Tag
@url = nil
@caption = nil
@class = nil
@link = nil
// Patterns
IMAGE_URL_WITH_CLASS_AND_CAPTION =
IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
def initialize(tag_name, markup, tokens)
super
if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
@class = $1
@url = $3
@caption = $7
@link = $9
elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
@class = $1
@url = $3
@caption = $7
elsif markup =~ IMAGE_URL_WITH_CAPTION
@url = $1
@caption = $5
elsif markup =~ IMAGE_URL_WITH_CLASS
@class = $1
@url = $3
elsif markup =~ IMAGE_URL
@url = $1
end
end
def render(context)
if @class
source = &amp;quot;&amp;lt;figure class='#{@class}'&amp;gt;&amp;quot;
else
source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
end
if @link
source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
end
source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
if @link
source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
end
source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
source
end
end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
&lt;/code>&lt;/pre>
&lt;p>is written as this Hugo shortcode:&lt;/p>
&lt;pre>&lt;code>&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
{{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
&amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
{{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
{{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
&amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
{{ .Get &amp;quot;title&amp;quot; }}{{ end }}
{{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
{{ .Get &amp;quot;caption&amp;quot; }}
{{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
{{ .Get &amp;quot;attr&amp;quot; }}
{{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
&amp;lt;/p&amp;gt; {{ end }}
&amp;lt;/figcaption&amp;gt;
{{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code>&lt;/pre>
&lt;h3 id="usage">Usage&lt;/h3>
&lt;p>I simply changed:&lt;/p>
&lt;pre>&lt;code>{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code>&lt;/pre>
&lt;p>to this (this example uses a slightly extended version named &lt;code>fig&lt;/code>, different than the built-in &lt;code>figure&lt;/code>):&lt;/p>
&lt;pre>&lt;code>{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code>&lt;/pre>
&lt;p>As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p>
&lt;h2 id="finishing-touches">Finishing touches&lt;/h2>
&lt;h3 id="fix-content">Fix content&lt;/h3>
&lt;p>Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code>hugo server --watch&lt;/code> is your friend. Test your changes and fix errors as needed.&lt;/p>
&lt;h3 id="clean-up">Clean up&lt;/h3>
&lt;p>You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.&lt;/p>
&lt;h2 id="a-practical-example-in-a-diff">A practical example in a diff&lt;/h2>
&lt;p>&lt;a href="http://heyitsalex.net/">Hey, it&amp;rsquo;s Alex&lt;/a> was migrated in less than a &lt;em>father-with-kids day&lt;/em> from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href="https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610">diff&lt;/a>.&lt;/p></description></item><item><title>Syntax Highlighting</title><link>https://ytyeoh.github.io/tmc/post/syntax-highlighting/</link><pubDate>Tue, 30 Aug 2011 16:01:23 +0800</pubDate><guid>https://ytyeoh.github.io/tmc/post/syntax-highlighting/</guid><description>&lt;p>More detail: &lt;a href="https://gohugo.io/content-management/syntax-highlighting/">Syntax Highlighting | Hugo&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-0-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-0-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">function&lt;/span> helloWorld () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alert(&lt;span style="color:#4070a0">&amp;#34;Hello, World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-4">4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-1-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-1-5">5&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">public&lt;/span> &lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">HelloWorld&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">public&lt;/span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> &lt;span style="color:#902000">void&lt;/span> &lt;span style="color:#06287e">main&lt;/span>&lt;span style="color:#666">(&lt;/span>String&lt;span style="color:#666">[]&lt;/span> args&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">out&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">println&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span style="color:#666">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-2-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-2-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-2-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-2-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-4">4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-2-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-2-5">5&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">package&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">hello&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">fun&lt;/span> &lt;span style="color:#06287e">main&lt;/span>(args: Array&amp;lt;String&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#4070a0">&amp;#34;Hello World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-3-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-3-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-3-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-3-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-3-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-3-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-3-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-3-4">4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-3-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-3-5">5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-3-6">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-3-6">6&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-3-7">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-3-7">7&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">#include&lt;/span> &lt;span style="color:#007020">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#007020">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">/* Hello */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">int&lt;/span> &lt;span style="color:#06287e">main&lt;/span>(&lt;span style="color:#902000">void&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06287e">printf&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Hello, World!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-4-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-4-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-4-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-4-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-4">4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-4-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-5">5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-4-6">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-6">6&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-4-7">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-7">7&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-4-8">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-4-8">8&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// &amp;#39;Hello World!&amp;#39; program
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">#include&lt;/span> &lt;span style="color:#007020">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#007020">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">int&lt;/span> &lt;span style="color:#06287e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#666">::&lt;/span>cout &lt;span style="color:#666">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#4070a0">&amp;#34;Hello World!&amp;#34;&lt;/span> &lt;span style="color:#666">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#666">::&lt;/span>endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> &lt;span style="color:#40a070">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-5-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-5-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-5-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-5-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-5-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-5-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-5-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-5-4">4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-5-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-5-5">5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-5-6">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-5-6">6&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">using&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">System&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">class&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">HelloWorld&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">public&lt;/span> &lt;span style="color:#007020;font-weight:bold">static&lt;/span> &lt;span style="color:#007020;font-weight:bold">void&lt;/span> Main(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.Console.WriteLine(&lt;span style="color:#4070a0">&amp;#34;Hello, World!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-6-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-6-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-6-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-6-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-6-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-6-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-6-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-6-4">4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-6-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-6-5">5&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#062873;font-weight:bold">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Hello, World!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#062873;font-weight:bold">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#062873;font-weight:bold">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-7-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-7-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-7-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-7-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-7-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-7-3">3&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-7-4">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-7-4">4&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-7-5">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-7-5">5&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-7-6">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-7-6">6&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-7-7">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-7-7">7&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">import&lt;/span> fmt &lt;span style="color:#4070a0">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">func&lt;/span> &lt;span style="color:#06287e">main&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fmt.&lt;span style="color:#06287e">Printf&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Hello, World!\n&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-8-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-8-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-8-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-8-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-8-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-8-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">object&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">HelloWorld&lt;/span> &lt;span style="color:#007020;font-weight:bold">with&lt;/span> &lt;span style="color:#0e84b5;font-weight:bold">Application&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0e84b5;font-weight:bold">Console&lt;/span>&lt;span style="color:#666">.&lt;/span>println&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#4070a0">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span style="color:#666">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-9-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-9-1">1&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-9-2">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-9-2">2&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-9-3">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-9-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">&amp;lt;?&lt;/span>php
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">echo&lt;/span> &lt;span style="color:#4070a0">&amp;#39;Hello, World!&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">?&amp;gt;&lt;/span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="hl-10-1">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#hl-10-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">print&lt;/span>(&lt;span style="color:#4070a0">&amp;#34;Hello, World!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="no-named-code-block">no named code block&lt;/h2>
&lt;pre tabindex="0">&lt;code>## this is a comment
$ echo this is a command
this is a command
## edit the file
$vi foo.md
+++
date = &amp;#34;2014-09-28&amp;#34;
title = &amp;#34;creating a new theme&amp;#34;
+++
bah and humbug
:wq
## show it
$ cat foo.md
+++
date = &amp;#34;2014-09-28&amp;#34;
title = &amp;#34;creating a new theme&amp;#34;
+++
bah and humbug
$
&lt;/code>&lt;/pre>&lt;h2 id="highlight-shortcode">highlight shortcode&lt;/h2>
&lt;p>example:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-shortcode" data-lang="shortcode">{{&amp;lt; highlight go &amp;#34;linenos=table,hl_lines=8 15-17,linenostart=199&amp;#34; &amp;gt;}}
// ... code
{{&amp;lt; /highlight &amp;gt;}}
&lt;/code>&lt;/pre>&lt;p>result:&lt;/p>
&lt;div class="highlight">&lt;div style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="199">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#199">199&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="200">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#200">200&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="201">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#201">201&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="202">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#202">202&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="203">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#203">203&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="204">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#204">204&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="205">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#205">205&lt;/a>
&lt;/span>&lt;span style="background-color:#d8d8d8">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="206">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#206">206&lt;/a>
&lt;/span>&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="207">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#207">207&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="208">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#208">208&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="209">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#209">209&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="210">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#210">210&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="211">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#211">211&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="212">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#212">212&lt;/a>
&lt;/span>&lt;span style="background-color:#d8d8d8">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="213">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#213">213&lt;/a>
&lt;/span>&lt;/span>&lt;span style="background-color:#d8d8d8">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="214">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#214">214&lt;/a>
&lt;/span>&lt;/span>&lt;span style="background-color:#d8d8d8">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="215">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#215">215&lt;/a>
&lt;/span>&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="216">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#216">216&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="217">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#217">217&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="218">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#218">218&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="219">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#219">219&lt;/a>
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f" id="220">&lt;a style="outline:none;text-decoration:none;color:inherit" href="#220">220&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// GetTitleFunc returns a func that can be used to transform a string to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// title case.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// The supported styles are
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// - &amp;#34;Go&amp;#34; (strings.Title)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// - &amp;#34;AP&amp;#34; (see https://www.apstylebook.com/)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// - &amp;#34;Chicago&amp;#34; (see http://www.chicagomanualofstyle.org/home.html)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// If an unknown or empty style is provided, AP style is what you get.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#007020;font-weight:bold">func&lt;/span> &lt;span style="color:#06287e">GetTitleFunc&lt;/span>(style &lt;span style="color:#902000">string&lt;/span>) &lt;span style="color:#007020;font-weight:bold">func&lt;/span>(s &lt;span style="color:#902000">string&lt;/span>) &lt;span style="color:#902000">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">switch&lt;/span> strings.&lt;span style="color:#06287e">ToLower&lt;/span>(style) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#4070a0">&amp;#34;go&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> strings.Title
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#007020;font-weight:bold">case&lt;/span> &lt;span style="color:#4070a0">&amp;#34;chicago&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> tc &lt;span style="color:#666">:=&lt;/span> transform.&lt;span style="color:#06287e">NewTitleConverter&lt;/span>(transform.ChicagoStyle)
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#d8d8d8">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> tc.Title
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tc &lt;span style="color:#666">:=&lt;/span> transform.&lt;span style="color:#06287e">NewTitleConverter&lt;/span>(transform.APStyle)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#007020;font-weight:bold">return&lt;/span> tc.Title
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>